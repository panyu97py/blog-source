{
  "posts": [
    {
      "content": "本文摘自[掘金](https://juejin.cn/post/6929302655118344200),写的很好抄录一下。建议多去给原作者点赞👍\n\n\n本文是可视化拖拽系列的第三篇，之前的两篇文章一共对 17 个功能点的技术原理进行了分析：\n\n\n1. 编辑器\n2. 自定义组件\n3. 拖拽\n4. 删除组件、调整图层层级\n5. 放大缩小\n6. 撤消、重做\n7. 组件属性设置\n8. 吸附\n9. 预览、保存代码\n10. 绑定事件\n11. 绑定动画\n12. 导入 PSD\n13. 手机模式\n14. 拖拽旋转 \n15. 复制粘贴剪切\n16. 数据交互\n17. 发布\n\n本文在此基础上，将对以下几个功能点的技术原理进行分析：\n\n18. 多个组件的组合和拆分\n19. 文本组件\n20. 矩形组件\n21. 锁定组件\n22. 快捷键\n23. 网格线\n24. 编辑器快照的另一种实现方式\n\n虽然我这个可视化拖拽组件库只是一个 DEMO，但对比了一下市面上的一些现成产品（例如 [processon](https://www.processon.com/)、[墨刀](https://modao.cc/)），就基础功能来说，我这个 DEMO 实现了绝大部分的功能。\n如果你对于低代码平台有兴趣，但又不了解的话。强烈建议将我的三篇文章结合项目源码一起阅读，相信对你的收获绝对不小。另附上项目、在线 DEMO 地址：\n\n[github 项目地址](https://github.com/woai3c/visual-drag-demo)\n\n[在线预览](https://woai3c.github.io/visual-drag-demo/#/)\n\n### 18. 多个组件的组合和拆分\n\n组合和拆分的技术点相对来说比较多，共有以下 4 个：\n\n* 选中区域\n* 组合后的移动、旋转\n* 组合后的放大缩小\n* 拆分后子组件样式的恢复\n\n#### 选中区域\n在将多个组件组合之前，需要先选中它们。利用鼠标事件可以很方便的将选中区域展示出来：\n\n![](https://panyu97py.github.io/post-images/1613505365488.gif)\n\n1. `mousedown` 记录起点坐标\n2. `mousemove` 将当前坐标和起点坐标进行计算得出移动区域\n3. 如果按下鼠标后往左上方移动，类似于这种操作则需要将当前坐标设为起点坐标，再计算出移动区域\n\n``` js\n// 获取编辑器的位移信息\nconst rectInfo = this.editor.getBoundingClientRect()\nthis.editorX = rectInfo.x\nthis.editorY = rectInfo.y\n\nconst startX = e.clientX\nconst startY = e.clientY\nthis.start.x = startX - this.editorX\nthis.start.y = startY - this.editorY\n// 展示选中区域\nthis.isShowArea = true\n\nconst move = (moveEvent) => {\n    this.width = Math.abs(moveEvent.clientX - startX)\n    this.height = Math.abs(moveEvent.clientY - startY)\n    if (moveEvent.clientX < startX) {\n        this.start.x = moveEvent.clientX - this.editorX\n    }\n\n    if (moveEvent.clientY < startY) {\n        this.start.y = moveEvent.clientY - this.editorY\n    }\n}\n```\n在 mouseup 事件触发时，需要对选中区域内的所有组件的位移大小信息进行计算，得出一个能包含区域内所有组件的最小区域。这个效果如下图所示：\n\n![](https://panyu97py.github.io/post-images/1613505466651.gif)\n\n这个计算过程的代码：\n\n```js\ncreateGroup() {\n  // 获取选中区域的组件数据\n  const areaData = this.getSelectArea()\n  if (areaData.length <= 1) {\n      this.hideArea()\n      return\n  }\n\n  // 根据选中区域和区域中每个组件的位移信息来创建 Group 组件\n  // 要遍历选择区域的每个组件，获取它们的 left top right bottom 信息来进行比较\n  let top = Infinity, left = Infinity\n  let right = -Infinity, bottom = -Infinity\n  areaData.forEach(component => {\n      let style = {}\n      if (component.component == 'Group') {\n          component.propValue.forEach(item => {\n              const rectInfo = $(`#component${item.id}`).getBoundingClientRect()\n              style.left = rectInfo.left - this.editorX\n              style.top = rectInfo.top - this.editorY\n              style.right = rectInfo.right - this.editorX\n              style.bottom = rectInfo.bottom - this.editorY\n\n              if (style.left < left) left = style.left\n              if (style.top < top) top = style.top\n              if (style.right > right) right = style.right\n              if (style.bottom > bottom) bottom = style.bottom\n          })\n      } else {\n          style = getComponentRotatedStyle(component.style)\n      }\n\n      if (style.left < left) left = style.left\n      if (style.top < top) top = style.top\n      if (style.right > right) right = style.right\n      if (style.bottom > bottom) bottom = style.bottom\n  })\n\n  this.start.x = left\n  this.start.y = top\n  this.width = right - left\n  this.height = bottom - top\n\t\n  // 设置选中区域位移大小信息和区域内的组件数据\n  this.$store.commit('setAreaData', {\n      style: {\n          left,\n          top,\n          width: this.width,\n          height: this.height,\n      },\n      components: areaData,\n  })\n},\n        \ngetSelectArea() {\n    const result = []\n    // 区域起点坐标\n    const { x, y } = this.start\n    // 计算所有的组件数据，判断是否在选中区域内\n    this.componentData.forEach(component => {\n        if (component.isLock) return\n        const { left, top, width, height } = component.style\n        if (x <= left && y <= top && (left + width <= x + this.width) && (top + height <= y + this.height)) {\n            result.push(component)\n        }\n    })\n\t\n    // 返回在选中区域内的所有组件\n    return result\n}\n```\n简单描述一下这段代码的处理逻辑：\n\n1. 利用 [`getBoundingClientRect()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect) 浏览器 API 获取每个组件相对于浏览器视口四个方向上的信息，也就是`left`、`top`、`right`、`bottom`。\n2. 对比每个组件的这四个信息，取得选中区域的最左、最上、最右、最下四个方向的数值，从而得出一个能包含区域内所有组件的最小区域。\n3. 如果选中区域内已经有一个 `Group` 组合组件，则需要对它里面的子组件进行计算，而不是对组合组件进行计算。\n\n#### 组合后的移动、旋转\n\n为了方便将多个组件一起进行移动、旋转、放大缩小等操作，我新创建了一个 `Group` 组合组件：\n\n```html\n<template>\n    <div class=\"group\">\n        <div>\n             <template v-for=\"item in propValue\">\n                <component\n                    class=\"component\"\n                    :is=\"item.component\"\n                    :style=\"item.groupStyle\"\n                    :propValue=\"item.propValue\"\n                    :key=\"item.id\"\n                    :id=\"'component' + item.id\"\n                    :element=\"item\"\n                />\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { getStyle } from '@/utils/style'\n\nexport default {\n    props: {\n        propValue: {\n            type: Array,\n            default: () => [],\n        },\n        element: {\n            type: Object,\n        },\n    },\n    created() {\n        const parentStyle = this.element.style\n        this.propValue.forEach(component => {\n            // component.groupStyle 的 top left 是相对于 group 组件的位置\n            // 如果已存在 component.groupStyle，说明已经计算过一次了。不需要再次计算\n            if (!Object.keys(component.groupStyle).length) {\n                const style = { ...component.style }\n                component.groupStyle = getStyle(style)\n                component.groupStyle.left = this.toPercent((style.left - parentStyle.left) / parentStyle.width)\n                component.groupStyle.top = this.toPercent((style.top - parentStyle.top) / parentStyle.height)\n                component.groupStyle.width = this.toPercent(style.width / parentStyle.width)\n                component.groupStyle.height = this.toPercent(style.height / parentStyle.height)\n            }\n        })\n    },\n    methods: {\n        toPercent(val) {\n            return val * 100 + '%'\n        },\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.group {\n    & > div {\n        position: relative;\n        width: 100%;\n        height: 100%;\n\n        .component {\n            position: absolute;\n        }\n    }\n}\n</style>\n```\n\n`Group` 组件的作用就是将区域内的组件放到它下面，成为子组件。并且在创建 `Group` 组件时，获取每个子组件在 `Group` 组件内的相对位移和相对大小：\n\n```js\ncreated() {\n    const parentStyle = this.element.style\n    this.propValue.forEach(component => {\n        // component.groupStyle 的 top left 是相对于 group 组件的位置\n        // 如果已存在 component.groupStyle，说明已经计算过一次了。不需要再次计算\n        if (!Object.keys(component.groupStyle).length) {\n            const style = { ...component.style }\n            component.groupStyle = getStyle(style)\n            component.groupStyle.left = this.toPercent((style.left - parentStyle.left) / parentStyle.width)\n            component.groupStyle.top = this.toPercent((style.top - parentStyle.top) / parentStyle.height)\n            component.groupStyle.width = this.toPercent(style.width / parentStyle.width)\n            component.groupStyle.height = this.toPercent(style.height / parentStyle.height)\n        }\n    })\n},\nmethods: {\n        toPercent(val) {\n            return val * 100 + '%'\n        },\n    },\n```\n\n也就是将子组件的 `left`、`top`、`right`、`bottom` 等属性转成以 `%` 结尾的相对数值。\n\n\n**为什么不使用绝对数值？**\n\n\n如果使用绝对数值，那么在移动 `Group` 组件时，除了对 `Group` 组件的属性进行计算外，还需要对它的每个子组件进行计算。并且 `Group` 包含子组件太多的话，在进行移动、放大缩小时，计算量会非常大，有可能会造成页面卡顿。如果改成相对数值，则只需要在 `Group` 创建时计算一次。然后在 `Group` 组件进行移动、旋转时也不用管 `Group` 的子组件，只对它自己计算即可。\n\n![](https://panyu97py.github.io/post-images/1613505786018.gif)\n\n#### 组合后的放大缩小\n\n组合后的放大缩小是个大问题，主要是因为有旋转角度的存在。首先来看一下各个子组件没旋转时的放大缩小：\n\n![](https://panyu97py.github.io/post-images/1613505848014.gif)\n\n从动图可以看出，效果非常完美。各个子组件的大小是跟随 `Group` 组件的大小而改变的。\n\n现在试着给子组件加上旋转角度，再看一下效果：\n\n![](https://panyu97py.github.io/post-images/1613505895886.gif)\n\n为什么会出现这个问题？\n主要是因为一个组件无论旋不旋转，它的 `left`、`top` 属性都是不变的。这样就会有一个问题，虽然实际上组件的  `left`、`top`、`right`、`bottom`  属性没有变化。但在外观上却发生了变化。下面是两个同样的组件：一个没旋转，一个旋转了 45 度。\n\n![](https://panyu97py.github.io/post-images/1613505976304.png)\n可以看出来旋转后按钮的`left`、`top`、`right`、`bottom` 属性和我们从外观上看到的是不一样的。\n\n接下来再看一个具体的示例：\n\n\n![](https://panyu97py.github.io/post-images/1613506012073.png)\n\n上面是一个 `Group` 组件，它左边的子组件属性为：\n\n```css\ntransform: rotate(-75.1967deg);\nwidth: 51.2267%;\nheight: 32.2679%;\ntop: 33.8661%;\nleft: -10.6496%;\n```\n\n可以看到 `width` 的值为 `51.2267%`，但从外观上来看，这个子组件最多占 `Group` 组件宽度的三分之一。所以这就是放大缩小不正常的问题所在。\n\n##### 一个不可行的解决方案（不想看的可以跳过）\n\n\n一开始我想的是，先算出它相对浏览器视口的 `left`、`top`、`right`、`bottom` 属性，再算出这几个属性在 `Group` 组件上的相对数值。这可以通过 `getBoundingClientRect()` `API` 实现。只要维持外观上的各个属性占比不变，这样 `Group` 组件在放大缩小时，再通过旋转角度，利用旋转矩阵的知识（这一点在第二篇有详细描述）获取它未旋转前的 t`left`、`top`、`right`、`bottom`  属性。这样就可以做到子组件动态调整了。\n\n\n但是这有个问题，通过 `getBoundingClientRect()` API 只能获取组件外观上的 `left`、`top`、`right`、`bottom`  属性。再加上一个角度，参数还是不够，所以无法计算出组件实际的 `left`、`top`、`right`、`bottom`  属性。\n\n![](https://panyu97py.github.io/post-images/1613506253945.png)\n\n就像上面的这张图，只知道原点` O(x,y)`、 `w`、`h` 和旋转角度，无法算出按钮的宽高。\n\n#### 一个可行的解决方案\n\n这是无意中发现的，我在对 `Group` 组件进行放大缩小时，发现只要保持 `Group` 组件的宽高比例，子组件就能做到根据比例放大缩小。那么现在问题就转变成了如何让 `Group` 组件放大缩小时保持宽高比例。我在网上找到了这一篇[文章](https://github.com/shenhudong/snapping-demo/wiki/corner-handle)，它详细描述了一个旋转组件如何保持宽高比来进行放大缩小，并配有源码示例。\n\n现在我尝试简单描述一下如何保持宽高比对一个旋转组件进行放大缩小（建议还是看看原文）。下面是一个已旋转一定角度的矩形，假设现在拖动它左上方的点进行拉伸。\n\n![](https://panyu97py.github.io/post-images/1613506394348.png)\n\n**第一步**，算出组件宽高比，以及按下鼠标时通过组件的坐标（无论旋转多少度，组件的 `top` 、`left` 属性不变）和大小算出组件中心点：\n```js\n// 组件宽高比\nconst proportion = style.width / style.height\n            \nconst center = {\n    x: style.left + style.width / 2,\n    y: style.top + style.height / 2,\n}\n```\n\n**第二步**，用当前点击坐标和组件中心点算出当前点击坐标的对称点坐标：\n```js\n// 获取画布位移信息\nconst editorRectInfo = document.querySelector('#editor').getBoundingClientRect()\n\n// 当前点击坐标\nconst curPoint = {\n    x: e.clientX - editorRectInfo.left,\n    y: e.clientY - editorRectInfo.top,\n}\n\n// 获取对称点的坐标\nconst symmetricPoint = {\n    x: center.x - (curPoint.x - center.x),\n    y: center.y - (curPoint.y - center.y),\n}\n```\n**第三步**，摁住组件左上角进行拉伸时，通过当前鼠标实时坐标和对称点计算出新的组件中心点：\n```js\nconst curPositon = {\n    x: moveEvent.clientX - editorRectInfo.left,\n    y: moveEvent.clientY - editorRectInfo.top,\n}\n\nconst newCenterPoint = getCenterPoint(curPositon, symmetricPoint)\n\n// 求两点之间的中点坐标\nfunction getCenterPoint(p1, p2) {\n    return {\n        x: p1.x + ((p2.x - p1.x) / 2),\n        y: p1.y + ((p2.y - p1.y) / 2),\n    }\n}\n```\n由于组件处于旋转状态，即使你知道了拉伸时移动的 xy 距离，也不能直接对组件进行计算。否则就会出现 BUG，移位或者放大缩小方向不正确。因此，我们需要在组件未旋转的情况下对其进行计算。\n\n![](https://panyu97py.github.io/post-images/1613506539352.png)\n\n**第四步**，根据已知的旋转角度、新的组件中心点、当前鼠标实时坐标可以算出当前鼠标实时坐标 `currentPosition` 在未旋转时的坐标 `newTopLeftPoint`。同时也能根据已知的旋转角度、新的组件中心点、对称点算出组件对称点 sPoint 在未旋转时的坐标 `newBottomRightPoint`。\n对应的计算公式如下：\n\n```js\n/**\n * 计算根据圆心旋转后的点的坐标\n * @param   {Object}  point  旋转前的点坐标\n * @param   {Object}  center 旋转中心\n * @param   {Number}  rotate 旋转的角度\n * @return  {Object}         旋转后的坐标\n * https://www.zhihu.com/question/67425734/answer/252724399 旋转矩阵公式\n */\nexport function calculateRotatedPointCoordinate(point, center, rotate) {\n    /**\n     * 旋转公式：\n     *  点a(x, y)\n     *  旋转中心c(x, y)\n     *  旋转后点n(x, y)\n     *  旋转角度θ                tan ??\n     * nx = cosθ * (ax - cx) - sinθ * (ay - cy) + cx\n     * ny = sinθ * (ax - cx) + cosθ * (ay - cy) + cy\n     */\n\n    return {\n        x: (point.x - center.x) * Math.cos(angleToRadian(rotate)) - (point.y - center.y) * Math.sin(angleToRadian(rotate)) + center.x,\n        y: (point.x - center.x) * Math.sin(angleToRadian(rotate)) + (point.y - center.y) * Math.cos(angleToRadian(rotate)) + center.y,\n    }\n}\n```\n\n上面的公式涉及到线性代数中旋转矩阵的知识，对于一个没上过大学的人来说，实在太难了。还好我从[知乎上的一个回答](https://www.zhihu.com/question/67425734/answer/252724399)中找到了这一公式的推理过程，下面是回答的原文：\n\n![](https://panyu97py.github.io/post-images/1613506660740.png)\n\n![](https://panyu97py.github.io/post-images/1613506688090.png)\n\n通过以上几个计算值，就可以得到组件新的位移值 `top`、`left` 以及新的组件大小。对应的完整代码如下：\n```js\nfunction calculateLeftTop(style, curPositon, pointInfo) {\n    const { symmetricPoint } = pointInfo\n    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint)\n    const newTopLeftPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate)\n    const newBottomRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate)\n  \n    const newWidth = newBottomRightPoint.x - newTopLeftPoint.x\n    const newHeight = newBottomRightPoint.y - newTopLeftPoint.y\n    if (newWidth > 0 && newHeight > 0) {\n        style.width = Math.round(newWidth)\n        style.height = Math.round(newHeight)\n        style.left = Math.round(newTopLeftPoint.x)\n        style.top = Math.round(newTopLeftPoint.y)\n    }\n}\n```\n现在再来看一下旋转后的放大缩小：\n\n![](https://panyu97py.github.io/post-images/1613506759227.gif)\n\n**第五步**，由于我们现在需要的是锁定宽高比来进行放大缩小，所以需要重新计算拉伸后的图形的左上角坐标。\n\n这里先确定好几个形状的命名：\n\n* 原图形: 　红色部分\n* 新图形: 　蓝色部分\n* 修正图形: 绿色部分，即加上宽高比锁定规则的修正图形\n\n![](https://panyu97py.github.io/post-images/1613506825223.gif)\n\n在第四步中算出组件未旋转前的 `newTopLeftPoint` `newBottomRightPoint` `newWidth` `newHeight` 后，需要根据宽高比 `proportion` 来算出新的宽度或高度。\n\n![](https://panyu97py.github.io/post-images/1613506905389.png)\n\n上图就是一个需要改变高度的示例，计算过程如下：\n\n```js\nif (newWidth / newHeight > proportion) {\n    newTopLeftPoint.x += Math.abs(newWidth - newHeight * proportion)\n    newWidth = newHeight * proportion\n} else {\n    newTopLeftPoint.y += Math.abs(newHeight - newWidth / proportion)\n    newHeight = newWidth / proportion\n}\n```\n由于现在求的未旋转前的坐标是以没按比例缩减宽高前的坐标来计算的，所以缩减宽高后，需要按照原来的中心点旋转回去，获得缩减宽高并旋转后对应的坐标。然后以这个坐标和对称点获得新的中心点，并重新计算未旋转前的坐标。\n\n![](https://panyu97py.github.io/post-images/1613506955962.png)\n\n![](https://panyu97py.github.io/post-images/1613507009595.png)\n\n经过修改后的完整代码如下：\n\n```js\nfunction calculateLeftTop(style, curPositon, proportion, needLockProportion, pointInfo) {\n    const { symmetricPoint } = pointInfo\n    let newCenterPoint = getCenterPoint(curPositon, symmetricPoint)\n    let newTopLeftPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate)\n    let newBottomRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate)\n  \n    let newWidth = newBottomRightPoint.x - newTopLeftPoint.x\n    let newHeight = newBottomRightPoint.y - newTopLeftPoint.y\n\n    if (needLockProportion) {\n        if (newWidth / newHeight > proportion) {\n            newTopLeftPoint.x += Math.abs(newWidth - newHeight * proportion)\n            newWidth = newHeight * proportion\n        } else {\n            newTopLeftPoint.y += Math.abs(newHeight - newWidth / proportion)\n            newHeight = newWidth / proportion\n        }\n\n        // 由于现在求的未旋转前的坐标是以没按比例缩减宽高前的坐标来计算的\n        // 所以缩减宽高后，需要按照原来的中心点旋转回去，获得缩减宽高并旋转后对应的坐标\n        // 然后以这个坐标和对称点获得新的中心点，并重新计算未旋转前的坐标\n        const rotatedTopLeftPoint = calculateRotatedPointCoordinate(newTopLeftPoint, newCenterPoint, style.rotate)\n        newCenterPoint = getCenterPoint(rotatedTopLeftPoint, symmetricPoint)\n        newTopLeftPoint = calculateRotatedPointCoordinate(rotatedTopLeftPoint, newCenterPoint, -style.rotate)\n        newBottomRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate)\n    \n        newWidth = newBottomRightPoint.x - newTopLeftPoint.x\n        newHeight = newBottomRightPoint.y - newTopLeftPoint.y\n    }\n\n    if (newWidth > 0 && newHeight > 0) {\n        style.width = Math.round(newWidth)\n        style.height = Math.round(newHeight)\n        style.left = Math.round(newTopLeftPoint.x)\n        style.top = Math.round(newTopLeftPoint.y)\n    }\n}\n```\n保持宽高比进行放大缩小的效果如下：\n\n![](https://panyu97py.github.io/post-images/1613507087355.gif)\n\n当 `Group` 组件有旋转的子组件时，才需要保持宽高比进行放大缩小。所以在创建 `Group` 组件时可以判断一下子组件是否有旋转角度。如果没有，就不需要保持宽度比进行放大缩小。\n\n```js\nisNeedLockProportion() {\n    if (this.element.component != 'Group') return false\n    const ratates = [0, 90, 180, 360]\n    for (const component of this.element.propValue) {\n        if (!ratates.includes(mod360(parseInt(component.style.rotate)))) {\n            return true\n        }\n    }\n\n    return false\n}\n```\n\n#### 拆分后子组件样式的恢复\n\n将多个组件组合在一起只是第一步，第二步是将 `Group` 组件进行拆分并恢复各个子组件的样式。保证拆分后的子组件在外观上的属性不变。\n\n计算代码如下：\n```js\n// store\ndecompose({ curComponent, editor }) {\n    const parentStyle = { ...curComponent.style }\n    const components = curComponent.propValue\n    const editorRect = editor.getBoundingClientRect()\n\n    store.commit('deleteComponent')\n    components.forEach(component => {\n        decomposeComponent(component, editorRect, parentStyle)\n        store.commit('addComponent', { component })\n    })\n}\n        \n// 将组合中的各个子组件拆分出来，并计算它们新的 style\nexport default function decomposeComponent(component, editorRect, parentStyle) {\n    // 子组件相对于浏览器视口的样式\n    const componentRect = $(`#component${component.id}`).getBoundingClientRect()\n    // 获取元素的中心点坐标\n    const center = {\n        x: componentRect.left - editorRect.left + componentRect.width / 2,\n        y: componentRect.top - editorRect.top + componentRect.height / 2,\n    }\n\n    component.style.rotate = mod360(component.style.rotate + parentStyle.rotate)\n    component.style.width = parseFloat(component.groupStyle.width) / 100 * parentStyle.width\n    component.style.height = parseFloat(component.groupStyle.height) / 100 * parentStyle.height\n    // 计算出元素新的 top left 坐标\n    component.style.left = center.x - component.style.width / 2\n    component.style.top = center.y - component.style.height / 2\n    component.groupStyle = {}\n}\n```\n\n这段代码的处理逻辑为：\n\n1. 遍历 `Group` 的子组件并恢复它们的样式\n2. 利用 `getBoundingClientRect() ``API` 获取子组件相对于浏览器视口的 `left` `top` `width` `height` 属性。\n3. 利用这四个属性计算出子组件的中心点坐标。\n4. 由于子组件的 `width` `height` 属性是相对于 `Group` 组件的，所以将它们的百分比值和 `Group` 相乘得出具体数值。\n5. 再用中心点 `center(x, y) `减去子组件宽高的一半得出它的 `left` `top` 属性。\n\n至此，组合和拆分就讲解完了。\n\n### 19. 文本组件\n文本组件 `VText` 之前就已经实现过了，但不完美。例如无法对文字进行选中。现在我对它进行了重写，让它支持选中功能。\n```js\n<template>\n    <div v-if=\"editMode == 'edit'\" class=\"v-text\" @keydown=\"handleKeydown\" @keyup=\"handleKeyup\">\n        <!-- tabindex >= 0 使得双击时聚集该元素 -->\n        <div :contenteditable=\"canEdit\" :class=\"{ canEdit }\" @dblclick=\"setEdit\" :tabindex=\"element.id\" @paste=\"clearStyle\"\n            @mousedown=\"handleMousedown\" @blur=\"handleBlur\" ref=\"text\" v-html=\"element.propValue\" @input=\"handleInput\"\n            :style=\"{ verticalAlign: element.style.verticalAlign }\"\n        ></div>\n    </div>\n    <div v-else class=\"v-text\">\n        <div v-html=\"element.propValue\" :style=\"{ verticalAlign: element.style.verticalAlign }\"></div>\n    </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { keycodes } from '@/utils/shortcutKey.js'\n\nexport default {\n    props: {\n        propValue: {\n            type: String,\n            require: true,\n        },\n        element: {\n            type: Object,\n        },\n    },\n    data() {\n        return {\n            canEdit: false,\n            ctrlKey: 17,\n            isCtrlDown: false,\n        }\n    },\n    computed: {\n        ...mapState([\n            'editMode',\n        ]),\n    },\n    methods: {\n        handleInput(e) {\n            this.$emit('input', this.element, e.target.innerHTML)\n        },\n\n        handleKeydown(e) {\n            if (e.keyCode == this.ctrlKey) {\n                this.isCtrlDown = true\n            } else if (this.isCtrlDown && this.canEdit && keycodes.includes(e.keyCode)) {\n                e.stopPropagation()\n            } else if (e.keyCode == 46) { // deleteKey\n                e.stopPropagation()\n            }\n        },\n\n        handleKeyup(e) {\n            if (e.keyCode == this.ctrlKey) {\n                this.isCtrlDown = false\n            }\n        },\n\n        handleMousedown(e) {\n            if (this.canEdit) {\n                e.stopPropagation()\n            }\n        },\n\n        clearStyle(e) {\n            e.preventDefault()\n            const clp = e.clipboardData\n            const text = clp.getData('text/plain') || ''\n            if (text !== '') {\n                document.execCommand('insertText', false, text)\n            }\n\n            this.$emit('input', this.element, e.target.innerHTML)\n        },\n\n        handleBlur(e) {\n            this.element.propValue = e.target.innerHTML || '&nbsp;'\n            this.canEdit = false\n        },\n\n        setEdit() {\n            this.canEdit = true\n            // 全选\n            this.selectText(this.$refs.text)\n        },\n\n        selectText(element) {\n            const selection = window.getSelection()\n            const range = document.createRange()\n            range.selectNodeContents(element)\n            selection.removeAllRanges()\n            selection.addRange(range)\n        },\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.v-text {\n    width: 100%;\n    height: 100%;\n    display: table;\n\n    div {\n        display: table-cell;\n        width: 100%;\n        height: 100%;\n        outline: none;\n    }\n\n    .canEdit {\n        cursor: text;\n        height: 100%;\n    }\n}\n</style>\n```\n改造后的 VText 组件功能如下：\n\n1. 双击启动编辑。\n2. 支持选中文本。\n3. 粘贴时过滤掉文本的样式。\n4. 换行时自动扩充文本框的高度。\n\n![](https://panyu97py.github.io/post-images/1613507304088.gif)\n\n### 20. 矩形组件\n\n矩形组件其实就是一个内嵌 `VText` 文本组件的一个 `DIV`\n\n```js\n<template>\n    <div class=\"rect-shape\">\n        <v-text :propValue=\"element.propValue\" :element=\"element\" />\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        element: {\n            type: Object,\n        },\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.rect-shape {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n</style>\n```\n`VText` 文本组件有的功能它都有，并且可以任意放大缩小。\n\n![](https://panyu97py.github.io/post-images/1613507388868.gif)\n\n### 21. 锁定组件\n\n锁定组件主要是看到 `processon` 和墨刀有这个功能，于是我顺便实现了。锁定组件的具体需求为：不能移动、放大缩小、旋转、复制、粘贴等，只能进行解锁操作。\n它的实现原理也不难：\n\n1. 在自定义组件上加一个 `isLock` 属性，表示是否锁定组件。\n2. 在点击组件时，根据 `isLock` 是否为 `true` 来隐藏组件上的八个点和旋转图标。\n3. 为了突出一个组件被锁定，给它加上透明度属性和一个锁的图标。\n4. 如果组件被锁定，置灰上面所说的需求对应的按钮，不能被点击。\n\n相关代码如下：\n```js\nexport const commonAttr = {\n    animations: [],\n    events: {},\n    groupStyle: {}, // 当一个组件成为 Group 的子组件时使用\n    isLock: false, // 是否锁定组件\n}\n```\n\n```html\n<el-button @click=\"decompose\" \n:disabled=\"!curComponent || curComponent.isLock || curComponent.component != 'Group'\">拆分</el-button>\n\n<el-button @click=\"lock\" :disabled=\"!curComponent || curComponent.isLock\">锁定</el-button>\n<el-button @click=\"unlock\" :disabled=\"!curComponent || !curComponent.isLock\">解锁</el-button>\n```\n\n```html\n<template>\n    <div class=\"contextmenu\" v-show=\"menuShow\" :style=\"{ top: menuTop + 'px', left: menuLeft + 'px' }\">\n        <ul @mouseup=\"handleMouseUp\">\n            <template v-if=\"curComponent\">\n                <template v-if=\"!curComponent.isLock\">\n                    <li @click=\"copy\">复制</li>\n                    <li @click=\"paste\">粘贴</li>\n                    <li @click=\"cut\">剪切</li>\n                    <li @click=\"deleteComponent\">删除</li>\n                    <li @click=\"lock\">锁定</li>\n                    <li @click=\"topComponent\">置顶</li>\n                    <li @click=\"bottomComponent\">置底</li>\n                    <li @click=\"upComponent\">上移</li>\n                    <li @click=\"downComponent\">下移</li>\n                </template>\n                <li v-else @click=\"unlock\">解锁</li>\n            </template>\n            <li v-else @click=\"paste\">粘贴</li>\n        </ul>\n    </div>\n</template>\n```\n\n![](https://panyu97py.github.io/post-images/1613507515799.gif)\n\n### 22. 快捷键\n\n支持快捷键主要是为了提升开发效率，用鼠标点点点毕竟没有按键盘快。目前快捷键支持的功能如下：\n```\nconst ctrlKey = 17, \n    vKey = 86, // 粘贴\n    cKey = 67, // 复制\n    xKey = 88, // 剪切\n\n    yKey = 89, // 重做\n    zKey = 90, // 撤销\n\n    gKey = 71, // 组合\n    bKey = 66, // 拆分\n\n    lKey = 76, // 锁定\n    uKey = 85, // 解锁\n\n    sKey = 83, // 保存\n    pKey = 80, // 预览\n    dKey = 68, // 删除\n    deleteKey = 46, // 删除\n    eKey = 69 // 清空画布\n```\n\n实现原理主要是利用 `window` 全局监听按键事件，在符合条件的按键触发时执行对应的操作：\n\n```js\n// 与组件状态无关的操作\nconst basemap = {\n    [vKey]: paste,\n    [yKey]: redo,\n    [zKey]: undo,\n    [sKey]: save,\n    [pKey]: preview,\n    [eKey]: clearCanvas,\n}\n\n// 组件锁定状态下可以执行的操作\nconst lockMap = {\n    ...basemap,\n    [uKey]: unlock,\n}\n\n// 组件未锁定状态下可以执行的操作\nconst unlockMap = {\n    ...basemap,\n    [cKey]: copy,\n    [xKey]: cut,\n    [gKey]: compose,\n    [bKey]: decompose,\n    [dKey]: deleteComponent,\n    [deleteKey]: deleteComponent,\n    [lKey]: lock,\n}\n\nlet isCtrlDown = false\n// 全局监听按键操作并执行相应命令\nexport function listenGlobalKeyDown() {\n    window.onkeydown = (e) => {\n        const { curComponent } = store.state\n        if (e.keyCode == ctrlKey) {\n            isCtrlDown = true\n        } else if (e.keyCode == deleteKey && curComponent) {\n            store.commit('deleteComponent')\n            store.commit('recordSnapshot')\n        } else if (isCtrlDown) {\n            if (!curComponent || !curComponent.isLock) {\n                e.preventDefault()\n                unlockMap[e.keyCode] && unlockMap[e.keyCode]()\n            } else if (curComponent && curComponent.isLock) {\n                e.preventDefault()\n                lockMap[e.keyCode] && lockMap[e.keyCode]()\n            }\n        }\n    }\n\n    window.onkeyup = (e) => {\n        if (e.keyCode == ctrlKey) {\n            isCtrlDown = false\n        }\n    }\n}\n\n```\n\n为了防止和浏览器默认快捷键冲突，所以需要加上 `e.preventDefault()`。\n\n### 23. 网格线\n网格线功能使用 `SVG` 来实现：\n```html\n<template>\n    <svg class=\"grid\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n            <pattern id=\"smallGrid\" width=\"7.236328125\" height=\"7.236328125\" patternUnits=\"userSpaceOnUse\">\n                <path \n                    d=\"M 7.236328125 0 L 0 0 0 7.236328125\" \n                    fill=\"none\" \n                    stroke=\"rgba(207, 207, 207, 0.3)\" \n                    stroke-width=\"1\">\n                </path>\n            </pattern>\n            <pattern id=\"grid\" width=\"36.181640625\" height=\"36.181640625\" patternUnits=\"userSpaceOnUse\">\n                <rect width=\"36.181640625\" height=\"36.181640625\" fill=\"url(#smallGrid)\"></rect>\n                <path \n                    d=\"M 36.181640625 0 L 0 0 0 36.181640625\" \n                    fill=\"none\" \n                    stroke=\"rgba(186, 186, 186, 0.5)\" \n                    stroke-width=\"1\">\n                </path>\n            </pattern>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\"></rect>\n    </svg>\n</template>\n\n<style lang=\"scss\" scoped>\n.grid {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n</style>\n\n```\n对 SVG 不太懂的，建议看一下 [MDN 的教程](https://developer.mozilla.org/zh-CN/docs/Web/SVG)。\n\n### 24. 编辑器快照的另一种实现方式\n在系列文章的第一篇中，我已经分析过快照的实现原理。\n```js\nsnapshotData: [], // 编辑器快照数据\nsnapshotIndex: -1, // 快照索引\n        \nundo(state) {\n    if (state.snapshotIndex >= 0) {\n        state.snapshotIndex--\n        store.commit('setComponentData', deepCopy(state.snapshotData[state.snapshotIndex]))\n    }\n},\n\nredo(state) {\n    if (state.snapshotIndex < state.snapshotData.length - 1) {\n        state.snapshotIndex++\n        store.commit('setComponentData', deepCopy(state.snapshotData[state.snapshotIndex]))\n    }\n},\n\nsetComponentData(state, componentData = []) {\n    Vue.set(state, 'componentData', componentData)\n},\n\nrecordSnapshot(state) {\n    // 添加新的快照\n    state.snapshotData[++state.snapshotIndex] = deepCopy(state.componentData)\n    // 在 undo 过程中，添加新的快照时，要将它后面的快照清理掉\n    if (state.snapshotIndex < state.snapshotData.length - 1) {\n        state.snapshotData = state.snapshotData.slice(0, state.snapshotIndex + 1)\n    }\n},\n```\n用一个数组来保存编辑器的快照数据。保存快照就是不停地执行 `push()` 操作，将当前的编辑器数据推入 `snapshotData` 数组，并增加快照索引 `snapshotIndex。`\n由于每一次添加快照都是将当前编辑器的所有组件数据推入 `snapshotData`，保存的快照数据越多占用的内存就越多。对此有两个解决方案：\n\n1. 限制快照步数，例如只能保存 50 步的快照数据。\n2. 保存快照只保存差异部分。\n\n现在详细描述一下第二个解决方案。\n假设依次往画布上添加 a b c d 四个组件，在原来的实现中，对应的 `snapshotData` 数据为：\n\n```\n// snapshotData\n[\n  [a],\n  [a, b],\n  [a, b, c],\n  [a, b, c, d],\n]\n```\n\n从上面的代码可以发现，每一相邻的快照中，只有一个数据是不同的。所以我们可以为每一步的快照添加一个类型字段，用来表示此次操作是添加还是删除。\n\n那么上面添加四个组件的操作，所对应的 `snapshotData` 数据为：\n\n```\n// snapshotData\n[\n  [{ type: 'add', value: a }],\n  [{ type: 'add', value: b }],\n  [{ type: 'add', value: c }],\n  [{ type: 'add', value: d }],\n]\n```\n\n如果我们要删除 c 组件，那么 `snapshotData` 数据将变为：\n\n```\n// snapshotData\n[\n  [{ type: 'add', value: a }],\n  [{ type: 'add', value: b }],\n  [{ type: 'add', value: c }],\n  [{ type: 'add', value: d }],\n  [{ type: 'remove', value: c }],\n]\n```\n\n那如何使用现在的快照数据呢？\n\n我们需要遍历一遍快照数据，来生成编辑器的组件数据 `componentData`。假设在上面的数据基础上执行了 `undo` 撤销操作：\n\n```\n// snapshotData\n// 快照索引 snapshotIndex 此时为 3\n[\n  [{ type: 'add', value: a }],\n  [{ type: 'add', value: b }],\n  [{ type: 'add', value: c }],\n  [{ type: 'add', value: d }],\n  [{ type: 'remove', value: c }],\n]\n```\n\n1. snapshotData[0] 类型为 add，将组件 a 添加到 componentData 中，此时 componentData 为 [a]\n2. 依次类推 [a, b]\n3. [a, b, c]\n4. [a, b, c, d]\n\n如果这时执行 `redo` 重做操作，快照索引 `snapshotIndex` 变为 4。对应的快照数据类型为 `type: 'remove'`， 移除组件 c。则数组数据为` [a, b, d]`。\n这种方法其实就是时间换空间，虽然每一次保存的快照数据只有一项，但每次都得遍历一遍所有的快照数据。两种方法都不完美，要使用哪种取决于你，目前我仍在使用第一种方法。",
      "data": {
        "title": "可视化拖拽组件库一些技术要点原理分析（三）",
        "date": "2021-02-17 03:49:47",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "-lcqVVhek"
    },
    {
      "content": "本文摘自[掘金](https://juejin.cn/post/6918881497264947207),写的很好抄录一下。建议多去给原作者点赞👍\n\n上一篇文章主要讲解了以下几个功能点：\n\n1. 编辑器\n2. 自定义组件\n3. 拖拽\n4. 删除组件、调整图层层级\n5. 放大缩小\n6. 撤消、重做\n7. 组件属性设置\n8. 吸附\n9. 预览、保存代码\n10. 绑定事件\n11. 绑定动画\n12. 导入 PSD\n13. 手机模式\n\n现在这篇文章会在此基础上再补充 4 个功能点，分别是：\n\n* 拖拽旋转\n* 复制粘贴剪切\n* 数据交互\n* 发布\n和上篇文章一样，我已经将新功能的代码更新到了 github：\n\n[github 项目地址](https://github.com/woai3c/visual-drag-demo)\n\n[在线预览](https://woai3c.github.io/visual-drag-demo/#/)\n\n**友善提醒**： 建议结合源码一起阅读，效果更好（这个 DEMO 使用的是 Vue 技术栈）。\n\n### 14. 拖拽旋转\n\n在写上一篇文章时，原来的 DEMO 已经可以支持旋转功能了。但是这个旋转功能还有很多不完善的地方：\n\n1. 不支持拖拽旋转。\n2. 旋转后的放大缩小不正确。\n3. 旋转后的自动吸附不正确。\n4. 旋转后八个可伸缩点的光标不正确。\n\n这一小节，我们将逐一解决这四个问题。\n\n#### 拖拽旋转\n\n拖拽旋转需要使用 [`Math.atan2() `](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2)函数。\n>Math.atan2() 返回从原点(0,0)到(x,y)点的线段与x轴正方向之间的平面角度(弧度值)，也就是Math.atan2(y,x)。Math.atan2(y,x)中的y和x都是相对于圆点(0,0)的距离。\n\n简单的说就是以组件中心点为原点` (centerX,centerY)`，用户按下鼠标时的坐标设为 `(startX,startY)`，鼠标移动时的坐标设为` (curX,curY)`。旋转角度可以通过 `(startX,startY) `和 `(curX,curY) `计算得出。\n![](https://panyu97py.github.io/post-images/1613501916438.png)\n\n那我们如何得到从点 ` (startX,startY) `到点` (curX,curY) `之间的旋转角度呢？\n\n**第一步**，鼠标点击时的坐标设为` (startX,startY)`：\n\n```js\nconst startY = e.clientY\nconst startX = e.clientX\n```\n\n**第二步**，算出组件中心点：\n```js\n// 获取组件中心点位置\nconst rect = this.$el.getBoundingClientRect()\nconst centerX = rect.left + rect.width / 2\nconst centerY = rect.top + rect.height / 2\n```\n**第三步**，按住鼠标移动时的坐标设为` (curX,curY)`：\n\n```js\nconst curX = moveEvent.clientX\nconst curY = moveEvent.clientY\n```\n\n**第四步**，分别算出` (startX,startY) `和` (curX,curY)` 对应的角度，再将它们相减得出旋转的角度。另外，还需要注意的就是 `Math.atan2() `方法的返回值是一个弧度，因此还需要将弧度转化为角度。所以完整的代码为：\n\n```js\n// 旋转前的角度\nconst rotateDegreeBefore = Math.atan2(startY - centerY, startX - centerX) / (Math.PI / 180)\n// 旋转后的角度\nconst rotateDegreeAfter = Math.atan2(curY - centerY, curX - centerX) / (Math.PI / 180)\n// 获取旋转的角度值， startRotate 为初始角度值\npos.rotate = startRotate + rotateDegreeAfter - rotateDegreeBefore\n```\n\n![](https://panyu97py.github.io/post-images/1613502114333.gif)\n\n#### 放大缩小\n\n组件旋转后的放大缩小会有 BUG。\n\n![](https://panyu97py.github.io/post-images/1613502171703.gif)\n\n从上图可以看到，放大缩小时会发生移位。另外伸缩的方向和我们拖动的方向也不对。造成这一 BUG 的原因是：当初设计放大缩小功能没有考虑到旋转的场景。所以无论旋转多少角度，放大缩小仍然是按没旋转时计算的。\n\n下面再看一个具体的示例：\n\n![](https://panyu97py.github.io/post-images/1613502210577.png)\n\n从上图可以看出，在没有旋转时，按住顶点往上拖动，只需用 `y2 - y1` 就可以得出拖动距离` s`。这时将组件原来的高度加上 `s` 就能得出新的高度，同时将组件的 `top`、`left` 属性更新。\n\n![](https://panyu97py.github.io/post-images/1613502283095.png)\n\n现在旋转 180 度，如果这时拖住顶点往下拖动，我们期待的结果是组件高度增加。但这时计算的方式和原来没旋转时是一样的，所以结果和我们期待的相反，组件的高度将会变小（如果不理解这个现象，可以想像一下没有旋转的那张图，按住顶点往下拖动）。\n\n![](https://panyu97py.github.io/post-images/1613502327476.gif)\n\n如何解决这个问题呢？我从 github 上的一个项目[ `snapping-demo` ](https://github.com/shenhudong/snapping-demo/wiki/corner-handle)找到了解决方案：将放大缩小和旋转角度关联起来。\n\n##### 解决方案\n下面是一个已旋转一定角度的矩形，假设现在拖动它左上方的点进行拉伸。\n\n![](https://panyu97py.github.io/post-images/1613502421743.png)\n\n现在我们将一步步分析如何得出拉伸后的组件的正确大小和位移。\n\n**第一步**，按下鼠标时通过组件的坐标（无论旋转多少度，组件的 top left 属性不变）和大小算出组件中心点：\n\n```js\nconst center = {\n    x: style.left + style.width / 2,\n    y: style.top + style.height / 2,\n}\n```\n\n**第二步**，用**当前点击坐标**和**组件中心点算**出当前点击坐标的对称点坐标：\n```js\n// 获取画布位移信息\nconst editorRectInfo = document.querySelector('#editor').getBoundingClientRect()\n\n// 当前点击坐标\nconst curPoint = {\n    x: e.clientX - editorRectInfo.left,\n    y: e.clientY - editorRectInfo.top,\n}\n\n// 获取对称点的坐标\nconst symmetricPoint = {\n    x: center.x - (curPoint.x - center.x),\n    y: center.y - (curPoint.y - center.y),\n}\n```\n**第三步**，摁住组件左上角进行拉伸时，通过当前鼠标实时坐标和对称点计算出新的组件中心点：\n\n```js\nconst curPositon = {\n    x: moveEvent.clientX - editorRectInfo.left,\n    y: moveEvent.clientY - editorRectInfo.top,\n}\n\nconst newCenterPoint = getCenterPoint(curPositon, symmetricPoint)\n\n// 求两点之间的中点坐标\nfunction getCenterPoint(p1, p2) {\n    return {\n        x: p1.x + ((p2.x - p1.x) / 2),\n        y: p1.y + ((p2.y - p1.y) / 2),\n    }\n}\n```\n\n由于组件处于旋转状态，即使你知道了拉伸时移动的` xy `距离，也不能直接对组件进行计算。否则就会出现 BUG，移位或者放大缩小方向不正确。因此，我们需要在组件未旋转的情况下对其进行计算。\n\n![](https://panyu97py.github.io/post-images/1613502562307.png)\n\n**第四步**，根据已知的旋转角度、新的组件中心点、当前鼠标实时坐标可以算出当前鼠标实时坐标 `currentPosition` 在未旋转时的坐标 `newTopLeftPoint`。同时也能根据已知的旋转角度、新的组件中心点、对称点算出组件对称点 `sPoint` 在未旋转时的坐标 `newBottomRightPoint`。\n对应的计算公式如下：\n\n```js\n/**\n * 计算根据圆心旋转后的点的坐标\n * @param   {Object}  point  旋转前的点坐标\n * @param   {Object}  center 旋转中心\n * @param   {Number}  rotate 旋转的角度\n * @return  {Object}         旋转后的坐标\n * https://www.zhihu.com/question/67425734/answer/252724399 旋转矩阵公式\n */\nexport function calculateRotatedPointCoordinate(point, center, rotate) {\n    /**\n     * 旋转公式：\n     *  点a(x, y)\n     *  旋转中心c(x, y)\n     *  旋转后点n(x, y)\n     *  旋转角度θ                tan ??\n     * nx = cosθ * (ax - cx) - sinθ * (ay - cy) + cx\n     * ny = sinθ * (ax - cx) + cosθ * (ay - cy) + cy\n     */\n\n    return {\n        x: (point.x - center.x) * Math.cos(angleToRadian(rotate)) - (point.y - center.y) * Math.sin(angleToRadian(rotate)) + center.x,\n        y: (point.x - center.x) * Math.sin(angleToRadian(rotate)) + (point.y - center.y) * Math.cos(angleToRadian(rotate)) + center.y,\n    }\n}\n```\n\n上面的公式涉及到线性代数中旋转矩阵的知识，对于一个没上过大学的人来说，实在太难了。还好我从[知乎上的一个回答](https://www.zhihu.com/question/67425734/answer/252724399)中找到了这一公式的推理过程，下面是回答的原文：\n\n![](https://panyu97py.github.io/post-images/1613502683980.png)\n\n![](https://panyu97py.github.io/post-images/1613502701696.png)\n\n通过以上几个计算值，就可以得到组件新的位移值` top`、` left` 以及新的组件大小。对应的完整代码如下：\n\n```js\nfunction calculateLeftTop(style, curPositon, pointInfo) {\n    const { symmetricPoint } = pointInfo\n    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint)\n    const newTopLeftPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate)\n    const newBottomRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate)\n  \n    const newWidth = newBottomRightPoint.x - newTopLeftPoint.x\n    const newHeight = newBottomRightPoint.y - newTopLeftPoint.y\n    if (newWidth > 0 && newHeight > 0) {\n        style.width = Math.round(newWidth)\n        style.height = Math.round(newHeight)\n        style.left = Math.round(newTopLeftPoint.x)\n        style.top = Math.round(newTopLeftPoint.y)\n    }\n}\n```\n\n现在再来看一下旋转后的放大缩小：\n\n![](https://panyu97py.github.io/post-images/1613502785374.gif)\n\n#### 自动吸附\n\n自动吸附是根据组件的四个属性 `top`、`left` 、`width` 、`height` 计算的，在将组件进行旋转后，这些属性的值是不会变的。所以无论组件旋转多少度，吸附时仍然按未旋转时计算。这样就会有一个问题，虽然实际上组件的 `top`、`left` 、`width` 、`height` 属性没有变化。但在外观上却发生了变化。下面是两个同样的组件：一个没旋转，一个旋转了 45 度。\n\n![](https://panyu97py.github.io/post-images/1613502878822.png)\n\n可以看出来旋转后按钮的 `height` 属性和我们从外观上看到的高度是不一样的，所以在这种情况下就出现了吸附不正确的 BUG。\n\n![](https://panyu97py.github.io/post-images/1613502923904.gif)\n\n##### 解决方案\n\n如何解决这个问题？我们需要拿组件旋转后的大小及位移来做吸附对比。也就是说不要拿组件实际的属性来对比，而是拿我们看到的大小和位移做对比。\n\n![](https://panyu97py.github.io/post-images/1613502993620.png)\n\n从上图可以看出，旋转后的组件在 x 轴上的投射长度为两条红线长度之和。这两条红线的长度可以通过正弦和余弦算出，左边的红线用正弦计算，右边的红线用余弦计算：\n\n```js\nconst newWidth = style.width * cos(style.rotate) + style.height * sin(style.rotate)\n```\n同理，高度也是一样：\n\n```js\nconst newHeight = style.height * cos(style.rotate) + style.width * sin(style.rotate)\n```\n新的宽度和高度有了，再根据组件原有的 `top`、 `left` 属性，可以得出组件旋转后新的`top`、 `left`  属性。下面附上完整代码：\n\n```js\ntranslateComponentStyle(style) {\n    style = { ...style }\n    if (style.rotate != 0) {\n        const newWidth = style.width * cos(style.rotate) + style.height * sin(style.rotate)\n        const diffX = (style.width - newWidth) / 2\n        style.left += diffX\n        style.right = style.left + newWidth\n\n        const newHeight = style.height * cos(style.rotate) + style.width * sin(style.rotate)\n        const diffY = (newHeight - style.height) / 2\n        style.top -= diffY\n        style.bottom = style.top + newHeight\n\n        style.width = newWidth\n        style.height = newHeight\n    } else {\n        style.bottom = style.top + style.height\n        style.right = style.left + style.width\n    }\n\n    return style\n}\n```\n\n经过修复后，吸附也可以正常显示了\n\n![](https://panyu97py.github.io/post-images/1613503143257.gif)\n\n#### 光标\n\n光标和可拖动的方向不对，是因为八个点的光标是固定设置的，没有随着角度变化而变化。\n\n![](https://panyu97py.github.io/post-images/1613503197769.gif)\n\n##### 解决方案\n\n由于 `360 / 8 = 45`，所以可以为每一个方向分配 45 度的范围，每个范围对应一个光标。同时为每个方向设置一个初始角度，也就是未旋转时组件每个方向对应的角度。\n\n![](https://panyu97py.github.io/post-images/1613503255637.png)\n\n```js\npointList: ['lt', 't', 'rt', 'r', 'rb', 'b', 'lb', 'l'], // 八个方向\ninitialAngle: { // 每个点对应的初始角度\n    lt: 0,\n    t: 45,\n    rt: 90,\n    r: 135,\n    rb: 180,\n    b: 225,\n    lb: 270,\n    l: 315,\n},\nangleToCursor: [ // 每个范围的角度对应的光标\n    { start: 338, end: 23, cursor: 'nw' },\n    { start: 23, end: 68, cursor: 'n' },\n    { start: 68, end: 113, cursor: 'ne' },\n    { start: 113, end: 158, cursor: 'e' },\n    { start: 158, end: 203, cursor: 'se' },\n    { start: 203, end: 248, cursor: 's' },\n    { start: 248, end: 293, cursor: 'sw' },\n    { start: 293, end: 338, cursor: 'w' },\n],\ncursors: {},\n```\n计算方式也很简单：\n\n1. 假设现在组件已旋转了一定的角度 a。\n2. 遍历八个方向，用每个方向的初始角度 + a 得出现在的角度 b。\n3. 遍历 angleToCursor 数组，看看 b 在哪一个范围中，然后将对应的光标返回。\n\n经过上面三个步骤就可以计算出组件旋转后正确的光标方向。具体的代码如下：\n\n```js\ngetCursor() {\n    const { angleToCursor, initialAngle, pointList, curComponent } = this\n    const rotate = (curComponent.style.rotate + 360) % 360 // 防止角度有负数，所以 + 360\n    const result = {}\n    let lastMatchIndex = -1 // 从上一个命中的角度的索引开始匹配下一个，降低时间复杂度\n    pointList.forEach(point => {\n        const angle = (initialAngle[point] + rotate) % 360\n        const len = angleToCursor.length\n        while (true) {\n            lastMatchIndex = (lastMatchIndex + 1) % len\n            const angleLimit = angleToCursor[lastMatchIndex]\n            if (angle < 23 || angle >= 338) {\n                result[point] = 'nw-resize'\n                return\n            }\n\n            if (angleLimit.start <= angle && angle < angleLimit.end) {\n                result[point] = angleLimit.cursor + '-resize'\n                return\n            }\n        }\n    })\n\n    return result\n},\n```\n\n![](https://panyu97py.github.io/post-images/1613503358536.gif)\n\n从上面的动图可以看出来，现在八个方向上的光标是可以正确显示的。\n\n### 15. 复制粘贴剪切\n\n相对于拖拽旋转功能，复制粘贴就比较简单了。\n\n```js\nconst ctrlKey = 17, vKey = 86, cKey = 67, xKey = 88\nlet isCtrlDown = false\n\nwindow.onkeydown = (e) => {\n    if (e.keyCode == ctrlKey) {\n        isCtrlDown = true\n    } else if (isCtrlDown && e.keyCode == cKey) {\n        this.$store.commit('copy')\n    } else if (isCtrlDown && e.keyCode == vKey) {\n        this.$store.commit('paste')\n    } else if (isCtrlDown && e.keyCode == xKey) {\n        this.$store.commit('cut')\n    }\n}\n\nwindow.onkeyup = (e) => {\n    if (e.keyCode == ctrlKey) {\n        isCtrlDown = false\n    }\n}\n```\n\n监听用户的按键操作，在按下特定按键时触发对应的操作。\n\n##### 复制操作\n\n在 `vuex` 中使用 `copyData` 来表示复制的数据。当用户按下 `ctrl + c` 时，将当前组件数据深拷贝到 `copyData`。\n\n```js\ncopy(state) {\n    state.copyData = {\n        data: deepCopy(state.curComponent),\n        index: state.curComponentIndex,\n    }\n},\n```\n同时需要将当前组件在组件数据中的索引记录起来，在剪切中要用到。\n\n##### 粘贴操作\n\n```js\npaste(state, isMouse) {\n    if (!state.copyData) {\n        toast('请选择组件')\n        return\n    }\n\n    const data = state.copyData.data\n\n    if (isMouse) {\n        data.style.top = state.menuTop\n        data.style.left = state.menuLeft\n    } else {\n        data.style.top += 10\n        data.style.left += 10\n    }\n\n    data.id = generateID()\n    store.commit('addComponent', { component: data })\n    store.commit('recordSnapshot')\n    state.copyData = null\n},\n```\n\n粘贴时，如果是按键操作 `ctrl+v`。则将组件的 `top`、`left` 属性加 10，以免和原来的组件重叠在一起。如果是使用鼠标右键执行粘贴操作，则将复制的组件放到鼠标点击处。\n\n##### 剪切操作\n\n```js\ncut(state) {\n    if (!state.curComponent) {\n        toast('请选择组件')\n        return\n    }\n\n    if (state.copyData) {\n        store.commit('addComponent', { component: state.copyData.data, index: state.copyData.index })\n        if (state.curComponentIndex >= state.copyData.index) {\n            // 如果当前组件索引大于等于插入索引，需要加一，因为当前组件往后移了一位\n            state.curComponentIndex++\n        }\n    }\n\n    store.commit('copy')\n    store.commit('deleteComponent')\n},\n```\n剪切操作本质上还是复制，只不过在执行复制后，需要将当前组件删除。为了避免用户执行剪切操作后，不执行粘贴操作，而是继续执行剪切。这时就需要将原先剪切的数据进行恢复。所以复制数据中记录的索引就起作用了，可以通过索引将原来的数据恢复到原来的位置中。\n\n##### 右键操作\n\n右键操作和按键操作是一样的，一个功能两种触发途径。\n\n```js\n<li @click=\"copy\" v-show=\"curComponent\">复制</li>\n<li @click=\"paste\">粘贴</li>\n<li @click=\"cut\" v-show=\"curComponent\">剪切</li>\n\ncut() {\n    this.$store.commit('cut')\n},\n\ncopy() {\n    this.$store.commit('copy')\n},\n\npaste() {\n    this.$store.commit('paste', true)\n},\n```\n\n### 16. 数据交互\n\n#### 方式一\n提前写好一系列 `ajax` 请求`API`，点击组件时按需选择` API`，选好 `API` 再填参数。例如下面这个组件，就展示了如何使用 `ajax` 请求向后台交互：\n\n```js\n<template>\n    <div>{{ propValue.data }}</div>\n</template>\n\n<script>\nexport default {\n    // propValue: {\n    //     api: {\n    //             request: a,\n    //             params,\n    //      },\n    //     data: null\n    // }\n    props: {\n        propValue: {\n            type: Object,\n            default: () => {},\n        },\n    },\n    created() {\n        this.propValue.api.request(this.propValue.api.params).then(res => {\n            this.propValue.data = res.data\n        })\n    },\n}\n</script>\n```\n\n#### 方式二\n方式二适合纯展示的组件，例如有一个报警组件，可以根据后台传来的数据显示对应的颜色。在编辑页面的时候，可以通过 `ajax` 向后台请求页面能够使用的 `websocket` 数据：\n\n```js\nconst data = ['status', 'text'...]\n```\n\n然后再为不同的组件添加上不同的属性。例如有 a 组件，它绑定的属性为 `status`。\n\n```js\n// 组件能接收的数据\nprops: {\n    propValue: {\n        type: String,\n    },\n    element: {\n        type: Object,\n    },\n    wsKey: {\n        type: String,\n        default: '',\n    },\n},\n```\n\n在组件中通过 `wsKey` 获取这个绑定的属性。等页面发布后或者预览时，通过 `weboscket` 向后台请求全局数据放在 `vuex` 上。组件就可以通过 `wsKey` 访问数据了。\n\n```js\n<template>\n    <div>{{ wsData[wsKey] }}</div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n    props: {\n        propValue: {\n            type: String,\n        },\n        element: {\n            type: Object,\n        },\n        wsKey: {\n            type: String,\n            default: '',\n        },\n    },\n    computed: mapState([\n        'wsData',\n    ]),\n</script>\n```\n和后台交互的方式有很多种，不仅仅包括上面两种，我在这里仅提供一些思路，以供参考。\n\n### 17. 发布\n页面发布有两种方式：一是将组件数据渲染为一个单独的 HTML 页面；二是从本项目中抽取出一个最小运行时 runtime 作为一个单独的项目。\n这里说一下第二种方式，本项目中的最小运行时其实就是预览页面加上自定义组件。将这些代码提取出来作为一个项目单独打包。发布页面时将组件数据以 JSON 的格式传给服务端，同时为每个页面生成一个唯一 ID。\n假设现在有三个页面，发布页面生成的 ID 为 a、b、c。访问页面时只需要把 ID 带上，这样就可以根据 ID 获取每个页面对应的组件数据。\n```\nwww.test.com/?id=a\nwww.test.com/?id=c\nwww.test.com/?id=b\n```\n\n#### 按需加载\n如果自定义组件过大，例如有数十个甚至上百个。这时可以将自定义组件用 import 的方式导入，做到按需加载，减少首屏渲染时间：\n\n```js\nimport Vue from 'vue'\n\nconst components = [\n    'Picture',\n    'VText',\n    'VButton',\n]\n\ncomponents.forEach(key => {\n    Vue.component(key, () => import(`@/custom-component/${key}`))\n})\n```\n\n#### 按版本发布\n\n自定义组件有可能会有更新的情况。例如原来的组件使用了大半年，现在有功能变更，为了不影响原来的页面。建议在发布时带上组件的版本号：\n```\n- v-text\n  - v1.vue\n  - v2.vue\n```\n例如 `v-text` 组件有两个版本，在左侧组件列表区使用时就可以带上版本号：\n```js\n{\n  component: 'v-text',\n  version: 'v1'\n  ...\n}\n```\n这样导入组件时就可以根据组件版本号进行导入：\n\n```js\nimport Vue from 'vue'\nimport componentList from '@/custom-component/component-list`\n\ncomponentList.forEach(component => {\n    Vue.component(component.name, () => import(`@/custom-component/${component.name}/${component.version}`))\n})\n```",
      "data": {
        "title": "可视化拖拽组件库一些技术要点原理分析（二）",
        "date": "2021-02-17 02:52:40",
        "tags": [
          "vue"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "1yIc3meiD"
    },
    {
      "content": "本文摘自[掘金](https://juejin.cn/post/6908502083075325959),写的很好抄录一下。建议多去给原作者点赞👍\n\n本文主要对以下技术要点进行分析：\n\n1. 编辑器\n2. 自定义组件\n3. 拖拽\n4. 删除组件、调整图层层级\n5. 放大缩小\n6. 撤消、重做\n7. 组件属性设置\n8. 吸附\n9. 预览、保存代码\n10. 绑定事件\n11. 绑定动画\n12. 导入 PSD\n13. 手机模式\n\n为了让本文更加容易理解，我将以上技术要点结合在一起写了一个可视化拖拽组件库 DEMO：\n\n[github 项目地址](https://github.com/woai3c/visual-drag-demo)\n\n[在线预览](https://woai3c.github.io/visual-drag-demo/#/)\n\n建议结合源码一起阅读，效果更好（这个 DEMO 使用的是 Vue 技术栈）。\n\n### 1. 编辑器\n\n先来看一下页面的整体结构。\n![](https://panyu97py.github.io/post-images/1613497344188.png)\n\n这一节要讲的编辑器其实就是中间的画布。它的作用是：当从左边组件列表拖拽出一个组件放到画布中时，画布要把这个组件渲染出来。\n这个编辑器的实现思路是：\n\n用一个数组 `componentData` 维护编辑器中的数据。\n把组件拖拽到画布中时，使用 `push()` 方法将新的组件数据添加到 `componentData`。\n编辑器使用 `v-for` 指令遍历 `componentData`，将每个组件逐个渲染到画布（也可以使用 `JSX`语法结合 `render()` 方法代替）。\n\n编辑器渲染的核心代码如下所示：\n\n```js\n<component \n  v-for=\"item in componentData\"\n  :key=\"item.id\"\n  :is=\"item.component\"\n  :style=\"item.style\"\n  :propValue=\"item.propValue\"\n/>\n```\n\n每个组件数据大概是这样：\n\n```js\n{\n    component: 'v-text', // 组件名称，需要提前注册到 Vue\n    label: '文字', // 左侧组件列表中显示的名字\n    propValue: '文字', // 组件所使用的值\n    icon: 'el-icon-edit', // 左侧组件列表中显示的名字\n    animations: [], // 动画列表\n    events: {}, // 事件列表\n    style: { // 组件样式\n        width: 200,\n        height: 33,\n        fontSize: 14,\n        fontWeight: 500,\n        lineHeight: '',\n        letterSpacing: 0,\n        textAlign: '',\n        color: '',\n    },\n}\n```\n\n在遍历 `componentData` 组件数据时，主要靠 `is` 属性来识别出真正要渲染的是哪个组件。\n例如要渲染的组件数据是` { component: 'v-text' }`，则 `<component :is=\"item.component\" /> `会被转换为 `<v-text />`。当然，你这个组件也要提前注册到 Vue 中。\n如果你想了解更多 is 属性的资料，请查看[官方文档](https://cn.vuejs.org/v2/api/#is)。\n\n### 2. 自定义组件\n\n原则上使用第三方组件也是可以的，但建议你最好封装一下。不管是第三方组件还是自定义组件，每个组件所需的属性可能都不一样，所以每个组件数据可以暴露出一个属性 `propValue` 用于传递值。\n例如 a 组件只需要一个属性，你的 `propValue` 可以这样写：`propValue: 'aaa'`。如果需要多个属性，`propValue` 则可以是一个对象：\n\n```js\npropValue: {\n  a: 1,\n  b: 'text'\n}\n```\n\n在这个 DEMO 组件库中我定义了三个组件。\n\n图片组件 Picture：\n\n```js\n<template>\n    <div style=\"overflow: hidden\">\n        <img :src=\"propValue\">\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        propValue: {\n            type: String,\n            require: true,\n        },\n    },\n}\n</script>\n```\n\n按钮组件 `VButton`:\n\n```js\n<template>\n    <button class=\"v-button\">{{ propValue }}</button>\n</template>\n\n<script>\nexport default {\n    props: {\n        propValue: {\n            type: String,\n            default: '',\n        },\n    },\n}\n</script>\n```\n\n文本组件 `VText`:\n\n```js\n<template>\n    <textarea \n        v-if=\"editMode == 'edit'\"\n        :value=\"propValue\"\n        class=\"text textarea\"\n        @input=\"handleInput\"\n        ref=\"v-text\"\n    ></textarea>\n    <div v-else class=\"text disabled\">\n        <div v-for=\"(text, index) in propValue.split('\\n')\" :key=\"index\">{{ text }}</div>\n    </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n    props: {\n        propValue: {\n            type: String,\n        },\n        element: {\n            type: Object,\n        },\n    },\n    computed: mapState([\n        'editMode',\n    ]),\n    methods: {\n        handleInput(e) {\n            this.$emit('input', this.element, e.target.value)\n        },\n    },\n}\n</script>\n```\n\n### 3. 拖拽\n\n#### 从组件列表到画布\n\n一个元素如果要设为可拖拽，必须给它添加一个 `draggable` 属性。另外，在将组件列表中的组件拖拽到画布中，还有两个事件是起到关键作用的：\n\n`dragstart` 事件，在拖拽刚开始时触发。它主要用于将拖拽的组件信息传递给画布。\n`drop` 事件，在拖拽结束时触发。主要用于接收拖拽的组件信息。\n\n先来看一下左侧组件列表的代码：\n\n```html\n<div @dragstart=\"handleDragStart\" class=\"component-list\">\n    <div v-for=\"(item, index) in componentList\" :key=\"index\" class=\"list\" draggable :data-index=\"index\">\n        <i :class=\"item.icon\"></i>\n        <span>{{ item.label }}</span>\n    </div>\n</div>\n```\n\n```js\nhandleDragStart(e) {\n    e.dataTransfer.setData('index', e.target.dataset.index)\n}\n```\n可以看到给列表中的每一个组件都设置了 `draggable` 属性。另外，在触发 `dragstart`事件时，使用 `dataTransfer.setData()` 传输数据。再来看一下接收数据的代码：\n\n```html\n<div class=\"content\" @drop=\"handleDrop\" @dragover=\"handleDragOver\" @click=\"deselectCurComponent\">\n    <Editor />\n</div>\n```\n```js\nhandleDrop(e) {\n    e.preventDefault()\n    e.stopPropagation()\n    const component = deepCopy(componentList[e.dataTransfer.getData('index')])\n    this.$store.commit('addComponent', component)\n}\n```\n触发 `drop` 事件时，使用 `dataTransfer.getData()` 接收传输过来的索引数据，然后根据索引找到对应的组件数据，再添加到画布，从而渲染组件。\n![](https://panyu97py.github.io/post-images/1613497886196.gif)\n\n#### 组件在画布中移动\n\n首先需要将画布设为相对定位 `position: relative`，然后将每个组件设为绝对定位 `position: absolute`。除了这一点外，还要通过监听三个事件来进行移动：\n\n1. `mousedown` 事件，在组件上按下鼠标时，记录组件当前的位置，即 xy 坐标（为了方便讲解，这里使用的坐标轴，实际上 xy 对应的是 css 中的 left 和 top。\n2. `mousemove` 事件，每次鼠标移动时，都用当前最新的 xy 坐标减去最开始的 xy 坐标，从而计算出移动距离，再改变组件位置。\n3. `mouseup` 事件，鼠标抬起时结束移动。\n\n```js\nhandleMouseDown(e) {\n    e.stopPropagation()\n    this.$store.commit('setCurComponent', { component: this.element, zIndex: this.zIndex })\n\n    const pos = { ...this.defaultStyle }\n    const startY = e.clientY\n    const startX = e.clientX\n    // 如果直接修改属性，值的类型会变为字符串，所以要转为数值型\n    const startTop = Number(pos.top)\n    const startLeft = Number(pos.left)\n\n    const move = (moveEvent) => {\n        const currX = moveEvent.clientX\n        const currY = moveEvent.clientY\n        pos.top = currY - startY + startTop\n        pos.left = currX - startX + startLeft\n        // 修改当前组件样式\n        this.$store.commit('setShapeStyle', pos)\n    }\n\n    const up = () => {\n        document.removeEventListener('mousemove', move)\n        document.removeEventListener('mouseup', up)\n    }\n\n    document.addEventListener('mousemove', move)\n    document.addEventListener('mouseup', up)\n}\n```\n![](https://panyu97py.github.io/post-images/1613498024998.gif)\n\n### 4. 删除组件、调整图层层级\n\n#### 改变图层层级\n\n由于拖拽组件到画布中是有先后顺序的，所以可以按照数据顺序来分配图层层级。\n例如画布新增了五个组件 abcde，那它们在画布数据中的顺序为 `[a, b, c, d, e]`，图层层级和索引一一对应，即它们的 `z-index` 属性值是 01234（后来居上）。用代码表示如下：\n\n```html\n<div v-for=\"(item, index) in componentData\" :zIndex=\"index\"></div>\n```\n如果不了解 z-index 属性的，请看一下 [MDN 文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index)。\n\n理解了这一点之后，改变图层层级就很容易做到了。改变图层层级，即是改变组件数据在 `componentData `数组中的顺序。例如有` [a, b, c] `三个组件，它们的图层层级从低到高顺序为 abc（索引越大，层级越高）。\n如果要将 b 组件上移，只需将它和 c 调换顺序即可：\n```js\nconst temp = componentData[1]\ncomponentData[1] = componentData[2]\ncomponentData[2] = temp\n```\n同理，置顶置底也是一样，例如我要将 a 组件置顶，只需将 a 和最后一个组件调换顺序即可：\n```js\nconst temp = componentData[0]\ncomponentData[0] = componentData[componentData.lenght - 1]\ncomponentData[componentData.lenght - 1] = temp\n```\n![](https://panyu97py.github.io/post-images/1613498228508.gif)\n\n#### 删除组件\n删除组件非常简单，一行代码搞定：`componentData.splice(index, 1)`。\n![](https://panyu97py.github.io/post-images/1613498335942.gif)\n\n### 5. 放大缩小\n\n细心的网友可能会发现，点击画布上的组件时，组件上会出现 8 个小圆点。这 8 个小圆点就是用来放大缩小用的。实现原理如下：\n\n#### 1. 在每个组件外面包一层 `Shape`组件，`Shape` 组件里包含 8 个小圆点和一个 `<slot> `插槽，用于放置组件。\n\n```html\n<!--页面组件列表展示-->\n<Shape v-for=\"(item, index) in componentData\"\n    :defaultStyle=\"item.style\"\n    :style=\"getShapeStyle(item.style, index)\"\n    :key=\"item.id\"\n    :active=\"item === curComponent\"\n    :element=\"item\"\n    :zIndex=\"index\"\n>\n    <component\n        class=\"component\"\n        :is=\"item.component\"\n        :style=\"getComponentStyle(item.style)\"\n        :propValue=\"item.propValue\"\n    />\n</Shape>\n```\n\n`Shape` 组件内部结构：\n\n```html\n<template>\n    <div class=\"shape\" :class=\"{ active: this.active }\" @click=\"selectCurComponent\" @mousedown=\"handleMouseDown\"\n    @contextmenu=\"handleContextMenu\">\n        <div\n            class=\"shape-point\"\n            v-for=\"(item, index) in (active? pointList : [])\"\n            @mousedown=\"handleMouseDownOnPoint(item)\"\n            :key=\"index\"\n            :style=\"getPointStyle(item)\">\n        </div>\n        <slot></slot>\n    </div>\n</template>\n```\n\n#### 2. 点击组件时，将 8 个小圆点显示出来。\n起作用的是这行代码 `:active=\"item === curComponent\"`。\n\n#### 3. 计算每个小圆点的位置。\n先来看一下计算小圆点位置的代码：\n```js\nconst pointList = ['t', 'r', 'b', 'l', 'lt', 'rt', 'lb', 'rb']\n\ngetPointStyle(point) {\n    const { width, height } = this.defaultStyle\n    const hasT = /t/.test(point)\n    const hasB = /b/.test(point)\n    const hasL = /l/.test(point)\n    const hasR = /r/.test(point)\n    let newLeft = 0\n    let newTop = 0\n\n    // 四个角的点\n    if (point.length === 2) {\n        newLeft = hasL? 0 : width\n        newTop = hasT? 0 : height\n    } else {\n        // 上下两点的点，宽度居中\n        if (hasT || hasB) {\n            newLeft = width / 2\n            newTop = hasT? 0 : height\n        }\n\n        // 左右两边的点，高度居中\n        if (hasL || hasR) {\n            newLeft = hasL? 0 : width\n            newTop = Math.floor(height / 2)\n        }\n    }\n\n    const style = {\n        marginLeft: hasR? '-4px' : '-3px',\n        marginTop: '-3px',\n        left: `${newLeft}px`,\n        top: `${newTop}px`,\n        cursor: point.split('').reverse().map(m => this.directionKey[m]).join('') + '-resize',\n    }\n\n    return style\n}\n\n```\n计算小圆点的位置需要获取一些信息：\n* 组件的高度 `height`、宽度 `width`\n\n注意，小圆点也是绝对定位的，相对于 Shape 组件。所以有四个小圆点的位置很好确定：\n\n1. 左上角的小圆点，坐标 `left: 0, top: 0`\n2. 右上角的小圆点，坐标 `left: width, top: 0`\n3. 左下角的小圆点，坐标 `left: 0, top: height`\n4. 右下角的小圆点，坐标 `left: width, top: height`\n\n![](https://panyu97py.github.io/post-images/1613498726273.png)\n\n另外的四个小圆点需要通过计算间接算出来。例如左边中间的小圆点，计算公式为 `left: 0, top: height / 2`，其他小圆点同理。\n\n![](https://panyu97py.github.io/post-images/1613498761944.png)\n\n#### 4. 点击小圆点时，可以进行放大缩小操作。\n\n```js\nhandleMouseDownOnPoint(point) {\n    const downEvent = window.event\n    downEvent.stopPropagation()\n    downEvent.preventDefault()\n\n    const pos = { ...this.defaultStyle }\n    const height = Number(pos.height)\n    const width = Number(pos.width)\n    const top = Number(pos.top)\n    const left = Number(pos.left)\n    const startX = downEvent.clientX\n    const startY = downEvent.clientY\n\n    // 是否需要保存快照\n    let needSave = false\n    const move = (moveEvent) => {\n        needSave = true\n        const currX = moveEvent.clientX\n        const currY = moveEvent.clientY\n        const disY = currY - startY\n        const disX = currX - startX\n        const hasT = /t/.test(point)\n        const hasB = /b/.test(point)\n        const hasL = /l/.test(point)\n        const hasR = /r/.test(point)\n        const newHeight = height + (hasT? -disY : hasB? disY : 0)\n        const newWidth = width + (hasL? -disX : hasR? disX : 0)\n        pos.height = newHeight > 0? newHeight : 0\n        pos.width = newWidth > 0? newWidth : 0\n        pos.left = left + (hasL? disX : 0)\n        pos.top = top + (hasT? disY : 0)\n        this.$store.commit('setShapeStyle', pos)\n    }\n\n    const up = () => {\n        document.removeEventListener('mousemove', move)\n        document.removeEventListener('mouseup', up)\n        needSave && this.$store.commit('recordSnapshot')\n    }\n\n    document.addEventListener('mousemove', move)\n    document.addEventListener('mouseup', up)\n}\n```\n\n它的原理是这样的：\n\n1. 点击小圆点时，记录点击的坐标 xy。\n2. 假设我们现在向下拖动，那么 y 坐标就会增大。\n3. 用新的 y 坐标减去原来的 y 坐标，就可以知道在纵轴方向的移动距离是多少。\n4. 最后再将移动距离加上原来组件的高度，就可以得出新的组件高度。\n5. 如果是正数，说明是往下拉，组件的高度在增加。如果是负数，说明是往上拉，组件的高度在减少。\n![](https://panyu97py.github.io/post-images/1613498868658.gif)\n\n### 6. 撤消、重做\n撤销重做的实现原理其实挺简单的，先看一下代码：\n```js\nsnapshotData: [], // 编辑器快照数据\nsnapshotIndex: -1, // 快照索引\n        \nundo(state) {\n    if (state.snapshotIndex >= 0) {\n        state.snapshotIndex--\n        store.commit('setComponentData', deepCopy(state.snapshotData[state.snapshotIndex]))\n    }\n},\n\nredo(state) {\n    if (state.snapshotIndex < state.snapshotData.length - 1) {\n        state.snapshotIndex++\n        store.commit('setComponentData', deepCopy(state.snapshotData[state.snapshotIndex]))\n    }\n},\n\nsetComponentData(state, componentData = []) {\n    Vue.set(state, 'componentData', componentData)\n},\n\nrecordSnapshot(state) {\n    // 添加新的快照\n    state.snapshotData[++state.snapshotIndex] = deepCopy(state.componentData)\n    // 在 undo 过程中，添加新的快照时，要将它后面的快照清理掉\n    if (state.snapshotIndex < state.snapshotData.length - 1) {\n        state.snapshotData = state.snapshotData.slice(0, state.snapshotIndex + 1)\n    }\n},\n```\n\n用一个数组来保存编辑器的快照数据。保存快照就是不停地执行 `push()` 操作，将当前的编辑器数据推入 `snapshotData` 数组，并增加快照索引 `snapshotIndex`。目前以下几个动作会触发保存快照操作：\n\n1. 新增组件\n2. 删除组件\n3. 改变图层层级\n4. 拖动组件结束时\n\n#### 撤销\n假设现在 `snapshotData` 保存了 4 个快照。即 `[a, b, c, d]`，对应的快照索引为 3。如果这时进行了撤销操作，我们需要将快照索引减 1，然后将对应的快照数据赋值给画布。\n例如当前画布数据是 d，进行撤销后，索引 -1，现在画布的数据是 c。\n#### 重做\n明白了撤销，那重做就很好理解了，就是将快照索引加 1，然后将对应的快照数据赋值给画布。\n不过还有一点要注意，就是在撤销操作中进行了新的操作，要怎么办呢？有两种解决方案：\n\n1. 新操作替换当前快照索引后面所有的数据。还是用刚才的数据 [a, b, c, d] 举例，假设现在进行了两次撤销操作，快照索引变为 1，对应的快照数据为 b，如果这时进行了新的操作，对应的快照数据为 e。那 e 会把 cd 顶掉，现在的快照数据为 [a, b, e]。\n2. 不顶掉数据，在原来的快照中新增一条记录。用刚才的例子举例，e 不会把 cd 顶掉，而是在 cd 之前插入，即快照数据变为 [a, b, e, c, d]。\n\n我采用的是第一种方案。\n\n![](https://panyu97py.github.io/post-images/1613499176409.gif)\n\n### 7. 吸附\n什么是吸附？就是在拖拽组件时，如果它和另一个组件的距离比较接近，就会自动吸附在一起。\n\n![](https://panyu97py.github.io/post-images/1613499297871.gif)\n\n吸附的代码大概在 300 行左右，建议自己打开源码文件看（文件路径：`src\\components\\Editor\\MarkLine.vue`）。这里不贴代码了，主要说说原理是怎么实现的。\n\n#### 标线\n\n在页面上创建 6 条线，分别是三横三竖。这 6 条线的作用是对齐，它们什么时候会出现呢？\n\n1. 上下方向的两个组件左边、中间、右边对齐时会出现竖线\n2. 左右方向的两个组件上边、中间、下边对齐时会出现横线\n\n具体的计算公式主要是根据每个组件的 xy 坐标和宽度高度进行计算的。例如要判断 ab 两个组件的左边是否对齐，则要知道它们每个组件的 x 坐标；如果要知道它们右边是否对齐，除了要知道 x 坐标，还要知道它们各自的宽度。\n\n```js\n// 左对齐的条件\na.x == b.x\n\n// 右对齐的条件\na.x + a.width == b.x + b.width\n\n```\n在对齐的时候，显示标线。\n\n另外还要判断 ab 两个组件是否“足够”近。如果足够近，就吸附在一起。是否足够近要靠一个变量来判断：\n```js\ndiff: 3, // 相距 dff 像素将自动吸附\n```\n小于等于 `diff` 像素则自动吸附。\n\n#### 吸附\n\n##### 吸附效果是怎么实现的呢？\n\n假设现在有 ab 组件，a 组件坐标 xy 都是 0，宽高都是 100。现在假设 a 组件不动，我们正在拖拽 b 组件。当把 b 组件拖到坐标为` x: 0, y: 103` 时，由于` 103 - 100 <= 3(diff)`，所以可以判定它们已经接近得足够近。这时需要手动将 b 组件的 y 坐标值设为 100，这样就将 ab 组件吸附在一起了。\n\n![](https://panyu97py.github.io/post-images/1613499573207.gif)\n\n#### 优化\n\n在拖拽时如果 6 条标线都显示出来会不太美观。所以我们可以做一下优化，在纵横方向上最多只同时显示一条线。实现原理如下：\n\n1. a 组件在左边不动，我们拖着 b 组件往 a 组件靠近。\n2. 这时它们最先对齐的是 a 的右边和 b 的左边，所以只需要一条线就够了。\n3. 如果 ab 组件已经靠近，并且 b 组件继续往左边移动，这时就要判断它们俩的中间是否对齐。\n4. b 组件继续拖动，这时需要判断 a 组件的左边和 b 组件的右边是否对齐，也是只需要一条线。\n\n可以发现，关键的地方是我们要知道两个组件的方向。即 ab 两个组件靠近，我们要知道到底 b 是在 a 的左边还是右边。\n这一点可以通过鼠标移动事件来判断，之前在讲解拖拽的时候说过，`mousedown` 事件触发时会记录起点坐标。所以每次触发 `mousemove` 事件时，用当前坐标减去原来的坐标，就可以判断组件方向。例如 x 方向上，如果 `b.x - a.x ` 的差值为正，说明是 b 在 a 右边，否则为左边。\n\n```js\n// 触发元素移动事件，用于显示标线、吸附功能\n// 后面两个参数代表鼠标移动方向\n// currY - startY > 0 true 表示向下移动 false 表示向上移动\n// currX - startX > 0 true 表示向右移动 false 表示向左移动\neventBus.$emit('move', this.$el, currY - startY > 0, currX - startX > 0)\n```\n\n![](https://panyu97py.github.io/post-images/1613499714989.gif)\n\n### 8. 组件属性设置\n每个组件都有一些通用属性和独有的属性，我们需要提供一个能显示和修改属性的地方。\n```js\n// 每个组件数据大概是这样\n{\n    component: 'v-text', // 组件名称，需要提前注册到 Vue\n    label: '文字', // 左侧组件列表中显示的名字\n    propValue: '文字', // 组件所使用的值\n    icon: 'el-icon-edit', // 左侧组件列表中显示的名字\n    animations: [], // 动画列表\n    events: {}, // 事件列表\n    style: { // 组件样式\n        width: 200,\n        height: 33,\n        fontSize: 14,\n        fontWeight: 500,\n        lineHeight: '',\n        letterSpacing: 0,\n        textAlign: '',\n        color: '',\n    },\n}\n```\n\n![](https://panyu97py.github.io/post-images/1613499824580.png)\n\n我定义了一个 `AttrList` 组件，用于显示每个组件的属性。\n```html\n<template>\n    <div class=\"attr-list\">\n        <el-form>\n            <el-form-item v-for=\"(key, index) in styleKeys\" :key=\"index\" :label=\"map[key]\">\n                <el-color-picker v-if=\"key == 'borderColor'\" v-model=\"curComponent.style[key]\"></el-color-picker>\n                <el-color-picker v-else-if=\"key == 'color'\" v-model=\"curComponent.style[key]\"></el-color-picker>\n                <el-color-picker v-else-if=\"key == 'backgroundColor'\" v-model=\"curComponent.style[key]\"></el-color-picker>\n                <el-select v-else-if=\"key == 'textAlign'\" v-model=\"curComponent.style[key]\">\n                    <el-option\n                        v-for=\"item in options\"\n                        :key=\"item.value\"\n                        :label=\"item.label\"\n                        :value=\"item.value\"\n                    ></el-option>\n                </el-select>\n                <el-input type=\"number\" v-else v-model=\"curComponent.style[key]\" />\n            </el-form-item>\n            <el-form-item label=\"内容\" v-if=\"curComponent && curComponent.propValue && !excludes.includes(curComponent.component)\">\n                <el-input type=\"textarea\" v-model=\"curComponent.propValue\" />\n            </el-form-item>\n        </el-form>\n    </div>\n</template>\n```\n代码逻辑很简单，就是遍历组件的 `style` 对象，将每一个属性遍历出来。并且需要根据具体的属性用不同的组件显示出来，例如颜色属性，需要用颜色选择器显示；数值类的属性需要用 `type=number`的 `input` 组件显示等等。\n为了方便用户修改属性值，我使用 `v-model` 将组件和值绑定在一起。\n\n![](https://panyu97py.github.io/post-images/1613499927469.gif)\n\n### 9. 预览、保存代码\n预览和编辑的渲染原理是一样的，区别是不需要编辑功能。所以只需要将原先渲染组件的代码稍微改一下就可以了。\n```js\n<!--页面组件列表展示-->\n<Shape v-for=\"(item, index) in componentData\"\n    :defaultStyle=\"item.style\"\n    :style=\"getShapeStyle(item.style, index)\"\n    :key=\"item.id\"\n    :active=\"item === curComponent\"\n    :element=\"item\"\n    :zIndex=\"index\"\n>\n    <component\n        class=\"component\"\n        :is=\"item.component\"\n        :style=\"getComponentStyle(item.style)\"\n        :propValue=\"item.propValue\"\n    />\n</Shape>\n```\n\n经过刚才的介绍，我们知道 `Shape` 组件具备了拖拽、放大缩小的功能。现在只需要将 `Shape` 组件去掉，外面改成套一个普通的 `DIV` 就可以了（其实不用这个`DIV` 也行，但为了绑定事件这个功能，所以需要加上）。\n\n```html\n<!--页面组件列表展示-->\n<div v-for=\"(item, index) in componentData\" :key=\"item.id\">\n    <component\n        class=\"component\"\n        :is=\"item.component\"\n        :style=\"getComponentStyle(item.style)\"\n        :propValue=\"item.propValue\"\n    />\n</div>\n```\n\n保存代码的功能也特别简单，只需要保存画布上的数据 `componentData` 即可。保存有两种选择：\n\n1. 保存到服务器\n2. 本地保存\n在 DEMO 上我使用的 localStorage 保存在本地。\n\n![](https://panyu97py.github.io/post-images/1613500069119.gif)\n\n### 10. 绑定事件\n\n每个组件有一个 `events` 对象，用于存储绑定的事件。目前我只定义了两个事件：\n\n1. alert 事件\n2. redirect 事件\n\n```js\n// 编辑器自定义事件\nconst events = {\n    redirect(url) {\n        if (url) {\n            window.location.href = url\n        }\n    },\n\n    alert(msg) {\n        if (msg) {\n            alert(msg)\n        }\n    },\n}\n\nconst mixins = {\n    methods: events,\n}\n\nconst eventList = [\n    {\n        key: 'redirect',\n        label: '跳转事件',\n        event: events.redirect,\n        param: '',\n    },\n    {\n        key: 'alert',\n        label: 'alert 事件',\n        event: events.alert,\n        param: '',\n    },\n]\n\nexport {\n    mixins,\n    events,\n    eventList,\n}\n\n```\n\n不过不能在编辑的时候触发，可以在预览的时候触发。\n\n![](https://panyu97py.github.io/post-images/1613500164656.gif)\n\n#### 添加事件\n\n通过 `v-for` 指令将事件列表渲染出来：\n\n```html\n<el-tabs v-model=\"eventActiveName\">\n    <el-tab-pane v-for=\"item in eventList\" :key=\"item.key\" :label=\"item.label\" :name=\"item.key\" style=\"padding: 0 20px\">\n        <el-input v-if=\"item.key == 'redirect'\" v-model=\"item.param\" type=\"textarea\" placeholder=\"请输入完整的 URL\" />\n        <el-input v-if=\"item.key == 'alert'\" v-model=\"item.param\" type=\"textarea\" placeholder=\"请输入要 alert 的内容\" />\n        <el-button style=\"margin-top: 20px;\" @click=\"addEvent(item.key, item.param)\">确定</el-button>\n    </el-tab-pane>\n</el-tabs>\n```\n选中事件时将事件添加到组件的 `events` 对象。\n\n#### 触发事件\n\n预览或真正渲染页面时，也需要在每个组件外面套一层 DIV，这样就可以在 DIV 上绑定一个点击事件，点击时触发我们刚才添加的事件。\n\n```html\n<template>\n    <div @click=\"handleClick\">\n        <component\n            class=\"conponent\"\n            :is=\"config.component\"\n            :style=\"getStyle(config.style)\"\n            :propValue=\"config.propValue\"\n        />\n    </div>\n</template>\n```\n```js\nhandleClick() {\n    const events = this.config.events\n    // 循环触发绑定的事件\n    Object.keys(events).forEach(event => {\n        this[event](events[event])\n    })\n}\n```\n\n### 11. 绑定动画\n\n动画和事件的原理是一样的，先将所有的动画通过 `v-for`指令渲染出来，然后点击动画将对应的动画添加到组件的 `animations` 数组里。同事件一样，执行的时候也是遍历组件所有的动画并执行。\n\n为了方便，我们使用了 [`animate.css` ](https://animate.style/)动画库。\n\n```js\n// main.js\nimport '@/styles/animate.css'\n```\n\n现在我们提前定义好所有的动画数据：\n\n```js\nexport default [\n    {\n        label: '进入',\n        children: [\n            { label: '渐显', value: 'fadeIn' },\n            { label: '向右进入', value: 'fadeInLeft' },\n            { label: '向左进入', value: 'fadeInRight' },\n            { label: '向上进入', value: 'fadeInUp' },\n            { label: '向下进入', value: 'fadeInDown' },\n            { label: '向右长距进入', value: 'fadeInLeftBig' },\n            { label: '向左长距进入', value: 'fadeInRightBig' },\n            { label: '向上长距进入', value: 'fadeInUpBig' },\n            { label: '向下长距进入', value: 'fadeInDownBig' },\n            { label: '旋转进入', value: 'rotateIn' },\n            { label: '左顺时针旋转', value: 'rotateInDownLeft' },\n            { label: '右逆时针旋转', value: 'rotateInDownRight' },\n            { label: '左逆时针旋转', value: 'rotateInUpLeft' },\n            { label: '右逆时针旋转', value: 'rotateInUpRight' },\n            { label: '弹入', value: 'bounceIn' },\n            { label: '向右弹入', value: 'bounceInLeft' },\n            { label: '向左弹入', value: 'bounceInRight' },\n            { label: '向上弹入', value: 'bounceInUp' },\n            { label: '向下弹入', value: 'bounceInDown' },\n            { label: '光速从右进入', value: 'lightSpeedInRight' },\n            { label: '光速从左进入', value: 'lightSpeedInLeft' },\n            { label: '光速从右退出', value: 'lightSpeedOutRight' },\n            { label: '光速从左退出', value: 'lightSpeedOutLeft' },\n            { label: 'Y轴旋转', value: 'flip' },\n            { label: '中心X轴旋转', value: 'flipInX' },\n            { label: '中心Y轴旋转', value: 'flipInY' },\n            { label: '左长半径旋转', value: 'rollIn' },\n            { label: '由小变大进入', value: 'zoomIn' },\n            { label: '左变大进入', value: 'zoomInLeft' },\n            { label: '右变大进入', value: 'zoomInRight' },\n            { label: '向上变大进入', value: 'zoomInUp' },\n            { label: '向下变大进入', value: 'zoomInDown' },\n            { label: '向右滑动展开', value: 'slideInLeft' },\n            { label: '向左滑动展开', value: 'slideInRight' },\n            { label: '向上滑动展开', value: 'slideInUp' },\n            { label: '向下滑动展开', value: 'slideInDown' },\n        ],\n    },\n    {\n        label: '强调',\n        children: [\n            { label: '弹跳', value: 'bounce' },\n            { label: '闪烁', value: 'flash' },\n            { label: '放大缩小', value: 'pulse' },\n            { label: '放大缩小弹簧', value: 'rubberBand' },\n            { label: '左右晃动', value: 'headShake' },\n            { label: '左右扇形摇摆', value: 'swing' },\n            { label: '放大晃动缩小', value: 'tada' },\n            { label: '扇形摇摆', value: 'wobble' },\n            { label: '左右上下晃动', value: 'jello' },\n            { label: 'Y轴旋转', value: 'flip' },\n        ],\n    },\n    {\n        label: '退出',\n        children: [\n            { label: '渐隐', value: 'fadeOut' },\n            { label: '向左退出', value: 'fadeOutLeft' },\n            { label: '向右退出', value: 'fadeOutRight' },\n            { label: '向上退出', value: 'fadeOutUp' },\n            { label: '向下退出', value: 'fadeOutDown' },\n            { label: '向左长距退出', value: 'fadeOutLeftBig' },\n            { label: '向右长距退出', value: 'fadeOutRightBig' },\n            { label: '向上长距退出', value: 'fadeOutUpBig' },\n            { label: '向下长距退出', value: 'fadeOutDownBig' },\n            { label: '旋转退出', value: 'rotateOut' },\n            { label: '左顺时针旋转', value: 'rotateOutDownLeft' },\n            { label: '右逆时针旋转', value: 'rotateOutDownRight' },\n            { label: '左逆时针旋转', value: 'rotateOutUpLeft' },\n            { label: '右逆时针旋转', value: 'rotateOutUpRight' },\n            { label: '弹出', value: 'bounceOut' },\n            { label: '向左弹出', value: 'bounceOutLeft' },\n            { label: '向右弹出', value: 'bounceOutRight' },\n            { label: '向上弹出', value: 'bounceOutUp' },\n            { label: '向下弹出', value: 'bounceOutDown' },\n            { label: '中心X轴旋转', value: 'flipOutX' },\n            { label: '中心Y轴旋转', value: 'flipOutY' },\n            { label: '左长半径旋转', value: 'rollOut' },\n            { label: '由小变大退出', value: 'zoomOut' },\n            { label: '左变大退出', value: 'zoomOutLeft' },\n            { label: '右变大退出', value: 'zoomOutRight' },\n            { label: '向上变大退出', value: 'zoomOutUp' },\n            { label: '向下变大退出', value: 'zoomOutDown' },\n            { label: '向左滑动收起', value: 'slideOutLeft' },\n            { label: '向右滑动收起', value: 'slideOutRight' },\n            { label: '向上滑动收起', value: 'slideOutUp' },\n            { label: '向下滑动收起', value: 'slideOutDown' },\n        ],\n    },\n]\n```\n然后用` v-for `指令渲染出来动画列表。\n![](https://panyu97py.github.io/post-images/1613500419330.gif)\n\n#### 添加动画\n\n```html\n<el-tabs v-model=\"animationActiveName\">\n    <el-tab-pane v-for=\"item in animationClassData\" :key=\"item.label\" :label=\"item.label\" :name=\"item.label\">\n        <el-scrollbar class=\"animate-container\">\n            <div\n                class=\"animate\"\n                v-for=\"(animate, index) in item.children\"\n                :key=\"index\"\n                @mouseover=\"hoverPreviewAnimate = animate.value\"\n                @click=\"addAnimation(animate)\"\n            >\n                <div :class=\"[hoverPreviewAnimate === animate.value && animate.value + ' animated']\">\n                    {{ animate.label }}\n                </div>\n            </div>\n        </el-scrollbar>\n    </el-tab-pane>\n</el-tabs>\n```\n点击动画将调用 `addAnimation(animate)` 将动画添加到组件的 `animations` 数组。\n\n#### 触发动画\n\n运行动画的代码：\n\n```js\nexport default async function runAnimation($el, animations = []) {\n    const play = (animation) => new Promise(resolve => {\n        $el.classList.add(animation.value, 'animated')\n        const removeAnimation = () => {\n            $el.removeEventListener('animationend', removeAnimation)\n            $el.removeEventListener('animationcancel', removeAnimation)\n            $el.classList.remove(animation.value, 'animated')\n            resolve()\n        }\n            \n        $el.addEventListener('animationend', removeAnimation)\n        $el.addEventListener('animationcancel', removeAnimation)\n    })\n\n    for (let i = 0, len = animations.length; i < len; i++) {\n        await play(animations[i])\n    }\n}\n```\n\n运行动画需要两个参数：组件对应的 `DOM` 元素（在组件使用 `this.$el `获取）和它的动画数据 `animations`。并且需要监听 `animationend` 事件和 `animationcancel` 事件：一个是动画结束时触发，一个是动画意外终止时触发。\n利用这一点再配合 `Promise` 一起使用，就可以逐个运行组件的每个动画了。\n\n### 12. 导入 PSD\n\n由于时间关系，这个功能我还没做。现在简单的描述一下怎么做这个功能。那就是使用 [`psd.js`](https://github.com/meltingice/psd.js#readme) 库，它可以解析 `PSD` 文件。\n\n使用 `psd.js` 库解析 `PSD` 文件得出的数据如下：\n\n```js\n{ children: \n   [ { type: 'group',\n       visible: false,\n       opacity: 1,\n       blendingMode: 'normal',\n       name: 'Version D',\n       left: 0,\n       right: 900,\n       top: 0,\n       bottom: 600,\n       height: 600,\n       width: 900,\n       children: \n        [ { type: 'layer',\n            visible: true,\n            opacity: 1,\n            blendingMode: 'normal',\n            name: 'Make a change and save.',\n            left: 275,\n            right: 636,\n            top: 435,\n            bottom: 466,\n            height: 31,\n            width: 361,\n            mask: {},\n            text: \n             { value: 'Make a change and save.',\n               font: \n                { name: 'HelveticaNeue-Light',\n                  sizes: [ 33 ],\n                  colors: [ [ 85, 96, 110, 255 ] ],\n                  alignment: [ 'center' ] },\n               left: 0,\n               top: 0,\n               right: 0,\n               bottom: 0,\n               transform: { xx: 1, xy: 0, yx: 0, yy: 1, tx: 456, ty: 459 } },\n            image: {} } ] } ],\n    document: \n       { width: 900,\n         height: 600,\n         resources: \n          { layerComps: \n             [ { id: 692243163, name: 'Version A', capturedInfo: 1 },\n               { id: 725235304, name: 'Version B', capturedInfo: 1 },\n               { id: 730932877, name: 'Version C', capturedInfo: 1 } ],\n            guides: [],\n            slices: [] } } }\n\n```\n\n从以上代码可以发现，这些数据和 `css` 非常像。根据这一点，只需要写一个转换函数，将这些数据转换成我们组件所需的数据，就能实现 `PSD`文件转成渲染组件的功能。目前 [`quark-h5`](https://github.com/huangwei9527/quark-h5) 和 [`luban-h5`](https://github.com/ly525/luban-h5) 都是这样实现的 `PSD` 转换功能。\n\n### 13. 手机模式\n\n由于画布是可以调整大小的，我们可以使用 iphone6 的分辨率来开发手机页面。\n\n![](https://panyu97py.github.io/post-images/1613500731839.png)\n\n### 总结\n\n由于 DEMO 的代码比较多，所以在讲解每一个功能点时，我只把关键代码贴上来。所以大家会发现 DEMO 的源码和我贴上来的代码会有些区别，请不必在意。\n\n另外，DEMO 的样式也比较简陋，主要是最近事情比较多，没太多时间写好看点，请见谅。\n",
      "data": {
        "title": "可视化拖拽组件库一些技术要点原理分析（一）",
        "date": "2021-02-17 01:33:54",
        "tags": [
          "vue"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "gFf8ea3r7"
    },
    {
      "content": "本文转自[segmentfault](https://segmentfault.com/a/1190000021707081)\n\n本文仅记录存在这种事件传递的方式，但不推崇。\n\n`EventBus`又称为事件总线。在`Vue`中可以使用 `EventBus` 来作为组件传递数据的桥梁的，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的灾难，因此才需要更完善的`Vuex`作为状态管理中心，将通知的概念上升到共享状态层次。\n\n>官方推荐的状态管理方案是 `Vuex`。不过如果项目不是很大，状态管理也没有很复杂的话，使用 Vuex 没必要。\n\n## 使用 EventBus\n> 你需要做的只是引入 `Vue` 并导出它的一个实例（在这种情况下，我称它为 `EventBus` ）。实质上它是一个不具备 `DOM` 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。\n### 初始化\n\n* 第一种方式: 可以在 `main.js`中，初始化 `EventBus`\n\n```\nVue.prototype.$EventBus = new Vue()\n```\n\n* 第二种方式: 创建一个 `Bus.js`,再创建事件总线并将其导出，以便其它模块可以使用或者监听它\n\n```\n// Bus.js\nimport Vue from 'vue'\nexport const EventBus = new Vue();\n```\n\n现在我们已经创建了 `EventBus` ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。\n\n### 发送和接受事件\n\n其实和 父子组件的通信差不多,用 `EventBus.$emit('eventName',data)`发送， `EventBus.$on(\"eventName\", callback(payload1,…))` 接受\n\n现在假设 A 组件与 B 组件通信\n\n```\n<!-- A.vue -->\n<template>\n    <p>{{msgB}}</p>\n    <button @click=\"sendMsgA()\">-</button>\n</template>\n\n<script> \nimport { EventBus } from \"../Bus.js\";\nexport default {\n    data(){\n        return {\n        msg: ''\n        }\n    },\n    mounted() {\n        EventBus.$on(\"bMsg\", (msg) => {\n            // a组件接受 b发送来的消息\n            this.msg = msg;\n        });\n    },\n    methods: {\n        sendMsgA() {\n            EventBus.$emit(\"aMsg\", '来自A页面的消息'); // a 发送数据\n        }\n    }\n}; \n</script>\n\n\n<!-- B.vue -->\n<template>\n  <p>{{msgA}}</p>\n    <button @click=\"sendMsgB()\">-</button>\n</template>\n\n<script> \nimport { EventBus } from \"../event-bus.js\";\nexport default {\n    data(){\n        return {\n        msg: ''\n        }\n    },\n    mounted() {\n        EventBus.$on(\"aMsg\", (msg) => {\n            // b组件接受 a发送来的消息\n            this.msg = msg;\n        });\n    },\n    methods: {\n        sendMsgB() {\n            EventBus.$emit(\"bMsg\", '来自b页面的消息'); // b发送数据\n        }\n    }\n};\n</script>\n```\n如果只监听(接受)一次数据可以使用 `EventBus.$once('eventName', callback(payload1,…)`\n\n### 移除移除事件监听者\n\n* 移除单个事件监听 `EventBus.$off('eventName', callback)`\n* 移除全部事件监听 `EventBus.$off()`\n\n```\n// 导入我们刚刚创建的 EventBus\nimport { EventBus } from '../Bus.js'\n\n// 事件监听函数\nconst clickHandler = function(clickCount) {\n  console.log(`Oh, hello)`)\n}\n\n// 开始监听事件\nEventBus.$on('i-got-clicked', clickHandler);\n\n// 停止监听\nEventBus.$off('i-got-clicked', clickHandler);\n\n```\n\n## 全局`EventBus`\n\n全局`EventBus`，虽然在某些示例中不提倡使用，但它是一种非常漂亮且简单的方法，可以跨组件之间共享数据。\n\n它的工作原理是发布/订阅方法，通常称为 `Pub`/`Sub` 。\n\n由于是全局的，必然所有事件都订阅它, 所有组件也发布到它，订阅组件获得更新。也就是说所有组件都能够将事件发布到总线，然后总线由另一个组件订阅，然后订阅它的组件将得到更新。\n\n### 创建全局`EventBus`\n\n全局事件总线只不过是一个简单的` vue` 组件。\n\n```\nvar EventBus = new Vue();\n\nObject.defineProperties(Vue.prototype, {\n  $bus: {\n    get: function () {\n      return EventBus\n    }\n  }\n})\n// 这个初始化的第一种方法，个人感觉区别不大\n```\n\n### 使用 `$on`和`$emit`\n\n在这个特定的总线中使用两个方法。一个用于创建发出的事件，它就是`$emit`；另一个用于订阅`$emit`,并接收参数执行回调，它就是`$on`：\n\n```\nthis.$bus.$emit('nameOfEvent',{ ... pass some event data ...});\n\nthis.$bus.$on('nameOfEvent',($event) => {\n    // ...\n})\n```\n\n## EventBus的优缺点\n\n### 缺点\n* 大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。\n* 如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。\n* 由于是都使用一个Vue实例，所以容易出现重复触发的情景，两个页面都定义了同一个事件名，并且没有用$off销毁（常出现在路由切换时）。\n\n### 优点\n* 解决了多层组件之间繁琐的事件传播。\n* 使用原理十分简单，代码量少。",
      "data": {
        "title": "vue -- 事件总线 EventBus",
        "date": "2021-02-17 01:01:03",
        "tags": [
          "vue"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "xNPEyzRmb"
    },
    {
      "content": "## 问题\n父级设置圆角属性失效 父元素使用border-radius和overflow:hidden做成圆形，子元素如果使用了transform属性，则父元素的overflow:hidden会失效。\n\n## 解决\n```\n-webkit-backface-visibility: hidden;\n-webkit-transform: translate3d(0, 0, 0);\n```",
      "data": {
        "title": "ios css border-radius元素 overflow:hidden失效问题",
        "date": "2021-02-17 00:49:36",
        "tags": [
          "css"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "VnrVXCKIi"
    },
    {
      "content": "本文摘自[简书](https://www.jianshu.com/p/fdb1421f3c8b)\n\n更新`Xcode 10`，自然开始第一时间运行老项目，踩坑填坑\n\n### 这边记录下基本出现的问题\n\n> `Error: Multiple commands produce`\n\nXcode 10 与本问题相关的一个更新点。\n\n>Build System\nAgain, Xcode 10 uses a new build system. The new build system provides improved reliability and build performance, and it catches project configuration problems that the legacy build system does not.\nThe legacy build system is still available in Xcode 10. To use the legacy build system, select it in the File > Project/Workspace Settings sheet. Projects configured to use the legacy build system will display an orange hammer icon in the Activity View.\n\n简单而言，`Xcode10`使用了一个的新创建系统，比之前的提供更好的可靠性与创建性能，而且可以获取项目配置问题（默认设置新创建系统）\n\n在苹果文档中，提及`Xcode10`中的关于旧项目`New Build System`更改适配中提及到以下两点\n\n* The new build system has stricter checks for cycles between elements in the build in order to prevent unnecessary rebuilds.\n\n* It is an error for any individual file in the build to be produced by more than one build command. For example, if two targets each declare the same output file from a shell script phase, factor out the declaration of the output file into a single target.\n\n`New Build System`会对构建中的元素循环进行严格的检查，避免不必要的重建，这个也是错误出现的原因。\n\n### 错误发生的两种普遍形式：\n\n#### 1. `info.plist`\n\n> 错误信息\n\n```\nMultiple commands produce '/Users/tjsoft/Library/Developer/Xcode/DerivedData/TYKYTwoLearnOneDo-amcfzswumxdotlgjwdslugmywxch/Build/Products/Debug-iphoneos/TYKYTwoLearnOneDo.app/Info.plist':\n1) Target 'TYKYTwoLearnOneDo' (project 'TYKYTwoLearnOneDo') has copy command from '/Users/tjsoft/TYKY /党建/黔纪/QianJiDangJian_iOS/TYKYTwoLearnOneDo/Info.plist' to '/Users/tjsoft/Library/Developer/Xcode/DerivedData/TYKYTwoLearnOneDo-amcfzswumxdotlgjwdslugmywxch/Build/Products/Debug-iphoneos/TYKYTwoLearnOneDo.app/Info.plist'\n2) Target 'TYKYTwoLearnOneDo' (project 'TYKYTwoLearnOneDo') has process command with output '/Users/tjsoft/Library/Developer/Xcode/DerivedData/TYKYTwoLearnOneDo-amcfzswumxdotlgjwdslugmywxch/Build/Products/Debug-iphoneos/TYKYTwoLearnOneDo.app/Info.plist'\n```\n\n#### 2. `Copy Pods Resources`\n\n> 错误信息\n\n```\nMultiple commands produce '/Users/tjsoft/Library/Developer/Xcode/DerivedData/TYKYTwoLearnOneDo-amcfzswumxdotlgjwdslugmywxch/Build/Products/Debug-iphoneos/TYKYTwoLearnOneDo.app':\n1) Target 'TYKYTwoLearnOneDo' has create directory command with output '/Users/tjsoft/Library/Developer/Xcode/DerivedData/TYKYTwoLearnOneDo-amcfzswumxdotlgjwdslugmywxch/Build/Products/Debug-iphoneos/TYKYTwoLearnOneDo.app'\n2) That command depends on command in Target 'TYKYTwoLearnOneDo': script phase “[CP] Copy Pods Resources”\n```\n\n\n### 解决方法可以有两种:\n\n#### 1. 一种是不使用`New Build System`，在`File` > `Project/Workspace Settings`中的`Share Project/Workspace Settings `里`build system `将`New Build System(Default)`切换成`Legacy build system`。\n\n![](https://panyu97py.github.io/post-images/1613494079991.png)\n\n#### 其次是根据出错信息，在新创建系统模式下，去除多余的引用重建。\n\n##### 1. Info.plist\n\n在 `target` -> `Build phase` > `Copy Bundle Resource` 中找到`info.plist`，移除\n\n![](https://panyu97py.github.io/post-images/1613494034862.png)\n\n\n##### 2. Copy Pods Resources\n\n在 `target` -> `Build phase` -> `Copy Pods Resources` -> `Output Files`，移除`${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}`\n\n![](https://panyu97py.github.io/post-images/1613494090242.png)\n",
      "data": {
        "title": "Xcode 10 中关于 Error: Multiple commands produce",
        "date": "2021-02-17 00:45:43",
        "tags": [
          "ios",
          "react-native"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "AVegNSKtq"
    },
    {
      "content": "### 题目描述\n给定两个大小为 `m` 和 `n` 的正序（从小到大）数组 `nums1` 和 `nums2`。\n\n请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为` O(log(m + n))`。\n\n你可以假设 `nums1` 和 `nums2` 不会同时为空。\n\n \n\n#### 示例1\n```\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n```\n#### 示例 2\n```\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n```\n\n#### 题解\n\n##### 题解一：暴力解法\n###### 思路\n根据题目描述及示例我们可以知道，用 len 表示合并后数组的长度如果是奇数，我们需要知道第 `（len+1）/2` 个数就可以了，如果遍历的话需要遍历 `Math.floor(len/2 ) + 1` 次。如果是偶数，我们需要知道第 `len/2`和 `len/2+1` 个数的值，也是需要遍历 `len/2+1` 次。所以遍历的话，奇数和偶数都是 `len/2+1` 次。\n\n即：\n* 若`len%2===1`中位数就是位于合并后数组`Math.floor(len/2)+1`的数字。\n* 若`(m+n)%2===0`中位数就是位于合并后数组`len/2`和`len/2+1`的数字的平均数。\n所以我们需要做的就是排序就可以了,这里我们采用指针法排序这样最多只需要移动`len/2+1`就能获得答案。\n时间复杂度：遍历 `len/2+1` 次，`len=m+n`，所以时间复杂度是 `O(m+n)`。\n\n空间复杂度：我们申请了常数个变量，也就是`m`，`n`，`len`，`pointer1`，`pointer2`，`newVal`，`oldVal` 以及 `i`。\n\n总共 8 个变量，所以空间复杂度是 `O(1)`。\n\n但这并不符合题目中要求的时间复杂度`O(log(m + n))`\n###### 代码\n```\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n    let m = nums1.length\n    let n = nums2.length\n    let len = m + n\n    let pointer1 = 0, pointer2 = 0\n    let newVal, oldVal\n    for (let i = 0; i <= len / 2; i++) {\n        oldVal = newVal\n        if (pointer1 < m && (nums1[pointer1] <= nums2[pointer2] || pointer2 >= n)) {\n            newVal = nums1[pointer1++]\n        } else {\n            newVal = nums2[pointer2++]\n        }\n    }\n    if ((len % 2) === 0) {\n        return (newVal + oldVal) / 2\n    } else {\n        return newVal\n    }\n};\n```\n\n##### 题解二：二分法\n未完待续。。。",
      "data": {
        "title": "寻找两个正序数组的中位数",
        "date": "2021-02-17 00:44:09",
        "tags": [
          "leetcode算法"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "d6wdVAP5_"
    },
    {
      "content": "### 题目描述\n\n给定一个整数数组 `nums` 和一个目标值 `target`，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n#### 示例\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n\n### 题解\n#### 方法一：暴力解法\n##### 思路：\n看到题目后最先想到的就是两个循环嵌套，遍历每个元素`x`，并查找是否存在一个目标元素与`x`相加等于`target`\n>时间复杂度：O(n^2)\n>空间复杂度：O(1)\n```\nvar twoSum = function(nums, target) {\nfor (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j]= target) {\n                return [i, j];\n            }\n        }\n    }\n};\n```\n\n#### 方法二：两遍哈希表\n##### 思路：\n\n为了对运行时间复杂度进行优化，我们可以使用哈希表。一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素 `target - nums[i]` 是否存在于表中。注意，该目标元素不能是 `nums[i]` 本身！\n\n>时间复杂度：O(n)\n>空间复杂度：O(n)\n\n```\nvar twoSum = function(nums, target) {\n    // 构造哈希表\n    var map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        //将数据作为map的key，数据的位置作为map的值（由于题目中提到每种输入只会对应一个答案，即数组中不存在重复的元素）\n        map.set(nums[i], i);\n    }\n    for (let j = 0; j < nums.length; j++) {\n        let complement = target - nums[j];\n        if (map.has(complement) && map.get(complement) !== j) {\n            return [j, map.get(complement)];\n        }\n    }\n    console.log(\"No two sum solution\");\n};\n\n```\n#### 方法三：一遍哈希表\n##### 思路：\n其实我们可以通过一遍哈希表完成查找，在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。\n>时间复杂度：O(n)\n>空间复杂度：O(n)\n```\nvar twoSum = function(nums, target) {\n    let targetMap = new Map()\n    for(let i = 0;i<nums.length;i++){\n        let a = target - nums[i]\n        if(targetMap.has(a)){\n            return [targetMap.get(a),i]\n        }\n        targetMap.set(nums[i],i)\n    }\n};\n```",
      "data": {
        "title": "两数之和",
        "date": "2021-02-17 00:43:37",
        "tags": [
          "leetcode算法"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "05Y8j1Evg"
    },
    {
      "content": "### 题目描述\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n#### 示例1\n```\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n#### 示例2\n```\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n#### 示例 3\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n### 题解\n\n#### 官方题解\n##### 思路\n![](https://panyu97py.github.io/post-images/1613493014542.png)\n如上图所示相当于左右两个指针对字符串各循环了一次\n##### 代码\n```\nvar lengthOfLongestSubstring = function(s) {\n    // 哈希集合，记录每个字符是否出现过\n    const occ = new Set();\n    const n = s.length;\n    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n    let rk = -1, ans = 0;\n    for (let i = 0; i < n; ++i) {\n        if (i != 0) {\n            // 左指针向右移动一格，移除一个字符\n            occ.delete(s.charAt(i - 1));\n        }\n        while (rk + 1 < n && !occ.has(s.charAt(rk + 1))) {\n            // 不断地移动右指针\n            occ.add(s.charAt(rk + 1));\n            ++rk;\n        }\n        // 第 i 到 rk 个字符是一个极长的无重复字符子串\n        ans = Math.max(ans, rk - i + 1);\n    }\n    return ans;\n};\n```\n#### 我的题解\n##### 思路\n获取字符串长度，并循环。每次循环判断map中是否存在key为该字符的值若不存在，将字符作为key，字符所在的位置作为value存入map中，若存在，则获取key为该字符的值将该值与当前的start做比较取较大的值作为start。每次循环计算长度（end-start+1）并与已存在的长度比较取较大的值。\n\n![](https://panyu97py.github.io/post-images/1613493060500.png)\n\n##### 代码\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n    let tempMap = new Map()\n    let start = 0\n    let length = 0\n    if(!s){\n      return 0\n    }\n    let len = s.length\n    for(let end = 0;end<len;end++){\n      if(tempMap.has(s.charAt(end))){\n        start =Math.max(start,tempMap.get(s.charAt(end))+1) \n      }\n      tempMap.set(s.charAt(end),end)\n      length = Math.max(length,end-start+1)\n    }\n    return length\n};\n```\n",
      "data": {
        "title": "无重复字符的最长字串",
        "date": "2021-02-17 00:28:38",
        "tags": [
          "leetcode算法"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "SVgfv_u3l"
    },
    {
      "content": "### 题目描述\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n#### 示例：\n```\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```\n### 题解\n#### 思路：\n首先我们根据代码注释可以了解到`l1`,`l2`的数据格式为：\n```\n{\n    val: 2,\n    next: {\n        val: 4,\n        next: {\n            val: 3,\n            next: null\n        }\n    }\n}\n```\n可以理解为每一个节点就是十进制的每一位，我们需要将每一位相加，若相加大于`10`则向下一位加一。\n```\n/*\n * @lc app=leetcode.cn id=2 lang=javascript\n *\n * [2] 两数相加\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n    let node = new ListNode()\n    let temp = node\n    let sum = 0\n    let add = 0\n    // 循环直到l1和l2最后的节点\n    while (l1 || l2) {\n        sum = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + add;\n        temp.next = new ListNode(sum % 10);//取余\n        temp = temp.next;\n        add = sum >= 10 ? 1 : 0;//记录下sum>=10用于下一次循环加一\n        // 若l1 存在则将l1.next赋值给l1，l2同理\n        l1 && (l1 = l1.next); \n        l2 && (l2 = l2.next);\n    }\n    // 当循环结束，l1与l2最后的节点相加的值 sum>=10 则复制给 temp.next\n    add && (temp.next = new ListNode(add));\n    return node.next\n};\n// @lc code=end\n\n```",
      "data": {
        "title": "两数相加",
        "date": "2021-02-17 00:28:05",
        "tags": [
          "leetcode算法"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "AcFQPeaQV"
    },
    {
      "content": "本文摘自[使用Travis-ci自动SSH部署代码](https://zhuwenlong.com/blog/article/5c24b6f2895e3a0fb4072a5c)和[使用 travis 自动部署 vuejs 项目](https://oidiotlin.com/shi-yong-travis-zi-dong-bu-shu-vuejs-xiang-mu/)\n## 1. 从手动部署到自动部署\n在整个代码部署的道路上，我经历了手动部署到`shell`半自动部署再到现在的`Travis`自动部署。\n### 1.1 石器时代 - 手动部署\n很早很早之前，我采用完全手动的方式部署代码：\n\n![](https://panyu97py.github.io/post-images/1613492275362.png)\n\n这个过程中我需要，先在本地编写并调试代码然后上传到Git服务器上，再手动`SSH`登录机器通过`git pull`下载最新的代码，最后在服务器上进行编译和重启服务。\n\n这种原始的模式往往最傻瓜有效，但意味着需要手动做一些列的工作，每次部署都会变得极其麻烦。\n### 1.2 青铜时代 - shell半自动部署\n后来我想到了把登录机器、编译、部署的事情交给shell自动执行，于是我就写了个shell脚本，主要的内容是：本地编译完成之后shell脚本自动的把代码打包，然后上传到服务器上，部署并重启服务。\n\n![](https://panyu97py.github.io/post-images/1613492312196.png)\n\n使用了`shell`之后大大的解放了双手，每次决定上线的时候只需要执行`sh deploy.sh`然后坐等结果就好了。但是使用shell也有他的弊端：每次上线都得手动执行部署命令，然后等待代码自动的打包上传以及部署，如果遇到网络抖动或者打包后的文件过大存在着失败的可能性，就有可能还需要再来一次。说是自动化，其实还是需要人工去观察和干预的，于是Mofei就想了，能不能有一种更高效的方式进行部署呢？于是就有了现在的部署方式。\n### 1.3 现代 - Travis自动部署\n通过配合`Travis`的使用，我们可以实现如下的效果：\n\n* 测试部署：每次`push`代码到`dev`分支，`Travis`会自动进行单元测试，然后自动的通过SSH将代码部署到对应的开发机器上并重启服务，以保持开发机上始终是最新的版本。\n* 正式部署：决定上线的时候可以将代码`push`代码到`deploy`分支上，`Travis`会自动将代码部署到正式的开发环境。\n\n![](https://panyu97py.github.io/post-images/1613492414921.png)\n\n当然了这个过程可以根据自己的团队进行适当的调整以决定何时进行部署。\n## 2.调教Travis\n步入正题，要完成自动部署，首先`Travis`要能监听`Git`的变化，然后`Travis`还需要有权限登录到我们的`SSH服务器`进行部署：\n\n![](https://panyu97py.github.io/post-images/1613492488023.png)\n\n1. 配置`Travis`，让`Travis`能监听`Git`的某个分支。\n2. `Git`某个分支提交之后，Travis能自动发现提交并进行编译。\n3. `Travis`将编译后的产物通过SSH部署到给我们指定的机器。\n### 2.1 初始化Travis\n>开始之前，如果你还没有`Travis`账号，请使用`Github`登录`Traivs`，并关联你的项目。\n\n`Travis`是通过项目中的`.travis.yml`文件来配置任务的，首先我们需要在项目的根目录建立`.travis.yml`文件，我们以该配置为例。\n\n新建`.travis.yml`文件，写上如下代码：\n```\nlanguage: node_js\nnode_js:\n- 8\n```\n其中`language`指得是项目运行语言，因为这里是`node.js`项目，所以写的是`node_js`，如果你使用的是其他的语言可以参考官方的文档。之后的`-8`指的是使用`v8版本`的`node.js`.当然你也可以指定多个版本来分别执行代码，如：\n```\nnode_js:\n- stable\n- '6'\n- '4'\n```\n那么我们以`vue`项目为例：\n如果不用 `travis`，对于一个 `vuejs `项目来说，大概有这两种部署方式：\n\n1. 开发环境打包:在开发机上打包出静态文件，再将` dist` 上传到生产环境。\n```\nnpm install\nnpm run build\nrsync ./dist/* <USERNAME>@<HOST>:<TARGET-PATH>\n```\n2. 生产环境打包:在生产环境中拉取仓库，打包，再拷贝到目标路径。\n```\nnpm install\nnpm run build\ncp ./dist/* <TARGET-PATH>\n```\n所以`vue`项目完整的`.travis.yml`文件如下：\n```\nlanguage: node_js\nnode_js: stable\nbranches:\n  only:\n  - master\naddons:\n  ssh_known_hosts:\n  - <HOST>\ninstall:\n- npm install\nscript:\n- npm run build\nafter_success:\n- rsync -az --delete ./dist/* <USERNAME>@<HOST>:<TARGET-PATH>\n```\n添加好`.travis.yml`文件之后，每次上传到Git中的代码都会自动进行`Travis`的构建，如果通过了可以在对应的`commit`后面看到一个绿色的勾，如果失败了会是一个红色的叉。\n\n![](https://panyu97py.github.io/post-images/1613492529472.png)\n\n但是如果仅仅是像上面那样配置的话，`travis build` 的时候会卡住。因为 `rsync` 工具需要输入` ssh` 登录密码，而在 `travis build` 环境里，我们根本无法输入密码。\n### 2.2 Travis添加SSH密钥\n通常我们是通过ssh命令加上用户名和密码访问服务器的，虽然理论上我们也可以在`travis`的命令中写上诸如`ssh mofei@zhuwenlong.com -p abc`的脚本，但是这样的代码如果提交到了公开的仓库中会有很大的泄露服务器密码的风险，所以我们需要一个别人无法窃取密码或者密钥的方式让`Travis`登录我们的服务器。\n\n通常的免密登录是基于`SSH`信任关系的，那么如果我们能把密钥以加密的形式保持在`Travis`的服务器中，`Travis`就能登录我们的服务器了。这里我们可以使用`Travis`的文件加密功能，把我们的密钥进行加密保存。\n\n![](https://panyu97py.github.io/post-images/1613492578954.png)\n\n在这个过程中，我们的密钥首先会被被`Travis`加密，解密的密钥被存储在`Travis`中，就是说只有`Travis`可以进行解密。所以我们可以大胆的把这个加密后的文件上传到`github`中，不用担心其他人盗用我们的密钥。\n\n既然我们想要使用`Travis`加密文件，第一件事情就是在本地安装`Travis`。\n\n>这里有一点一定要注意就是如果你的目标服务器为`linux`系统的话那么你的以下步骤也必须在`linux`系统中执行！！！！\n#### 2.2.1 本地安装Travis\n```\nsudo gem install travis\n```\n由于`Travis`使用的是`ruby`，如果遇到众所周知的原因无发现下载的话，可以将`ruby`更换成国内的源，具体可以参考这里。\n```\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n然后再次运行安装`Travis`的命令 `sudo gem install travis`\n\n安装好`Travis`之后，我们需要在命令行中登录`Travis`\n```\ntravis login --pro\n```\n一路输入你的`github`账号和密码很快就完成了。\n#### 2.2.2 生成并加密SSH密钥\n万事俱备只欠东风，我们现在只要生成`SSH`密钥，然后添加信任关系，并用`Travis`加密保存即可。\n\n在命令行中执行如下脚本：\n```\n# 在当前目录生成密钥\nssh-keygen -t rsa -b 4096 -C 'build@travis-ci.org' -f ./deploy_rsa\n# 使用Travis加密\ntravis encrypt-file deploy_rsa --add\n# 添加信任关系\nssh-copy-id -i deploy_rsa.pub <ssh-user>@<deploy-host>\n# 删除敏感文件\nrm -f deploy_rsa deploy_rsa.pub\n# 将修改添加到git中\ngit add deploy_rsa.enc .travis.yml\n```\n我们详细来看一下代码（如果你理解所有的命令，可以略过这一小段）：\n* 在当前目录生成密钥\n```\nssh-keygen -t rsa -b 4096 -C 'build@travis-ci.org' -f ./deploy_rsa\n```\n首先，我们使用ssh的命令在当前目录中生成了一个`ssh`密钥，这段代码执行完成之后，会在目录中生成2个文件，私钥`deploy_rsa`和公钥`deploy_rsa.pub`，前者是用来免密登录服务器时候使用的，后者服务器用来鉴定私钥的有效性的。\n* 使用Travis加密\n```\ntravis encrypt-file deploy_rsa --add\n```\n因为`Travis`只需要使用到私钥，所以我们这里讲私钥进行加密保存，这句话执行完成之后，你会看到在`.travis.yml`文件中被自动加了下面的代码(`--add`)，同时文件夹中也发现一个加密后的文件`deploy_rsa.enc`。\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_137f45644142_key -iv $encrypted_137f45644142_iv\n  -in deploy_rsa.enc -out deploy_rsa -d\n```\n这几行被自动添加的代码的意思是，在`install`之前执行解开`deploy_rsa.enc`文件的命令并放置到`deploy_rsa`以供使用，其中这里的`$encrypted_137f45644142_key`和`$encrypted_137f45644142_iv`是解开这个文件的两个变量被存储在了`Travis`的服务器上。\n* 添加信任关系\n```\nssh-copy-id -i deploy_rsa.pub <ssh-user>@<deploy-host>\n```\n这句话的意思是向目标服务器(`<ssh-user>@<deploy-host>`这里的`user`和`host`需要替换成自己服务器的用户名和地址)添加公钥，添加成功之后，所有用该公钥对应的私钥访问服务器都会直接被认证通过。也就是说如果`Travis`保持了私钥的话，就可以免密的通过`ssh`登录我们的服务器了。\n* 删除敏感文件并将修改添加到git中\n```\nrm -f deploy_rsa deploy_rsa.pub和git add deploy_rsa.enc .travis.yml\n```\n私钥`deploy_rsa`和`公钥deploy_rsa.pub`已经完成了他们的使命，我们可以把它删除以免被其他人恶意使用，并把生成的加密文件`deploy_rsa.enc`和修改后的`.travis.yml`添加到`git`中。\n### 2.3 Travis部署脚本\n所有的一切都准备好之后，我们就可以修改`.travis.yml`文件让`travis`来进行部署了。\n\n首先，我们需要在部署之前解密私钥，并使其生效，所以我们添加如下代码：\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_137f45644142_key -iv $encrypted_137f45644142_iv\n  -in deploy_rsa.enc -out /tmp/deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 /tmp/deploy_rsa\n- ssh-add /tmp/deploy_rsa\n```\n`before_install`字段标明了Travis在部署之前需要执行的命令，其中第一行是解密`ssh`文件，后面的3行是使`ssh`密钥生效。\n于是我们最终的`.travis.yml`文件内容如下：\n```\nlanguage: node_js\nnode_js: stable\nbranches:\n  only:\n  - master\naddons:\n  ssh_known_hosts:\n  - <HOST>\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_137f45644142_key -iv $encrypted_137f45644142_iv\n  -in deploy_rsa.enc -out /tmp/deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 /tmp/deploy_rsa\n- ssh-add /tmp/deploy_rsa\ninstall:\n- npm install\nscript:\n- npm run build\nafter_success:\n- rsync -az --delete ./dist/* <USERNAME>@<HOST>:<TARGET-PATH>\n```\n然后就可以在每次`push`之后玩去了。`Travis-ci`会自动帮我们完成部署。",
      "data": {
        "title": "使用Travis-ci自动SSH部署vue代码",
        "date": "2021-02-17 00:15:44",
        "tags": [
          "服务部署"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "8WTNVL6y5"
    },
    {
      "content": "## 使用\n\npackage.json\n```\n{\n    ...\n    \"scripts\":{\n        \"serve:dev\": \"cross-env API_ENV=dev vue-cli-service serve\"\n        ...\n    },\n    \"dependencies\": {\n      ...\n      \"cross-env\": \"^7.0.2\",\n      ...\n    },\n    ...\n}\n```\n.env\n```\nVUE_APP_API_ENV=${API_ENV}\n```\n项目中取用\n```\nconsole.log(process.env.VUE_APP_API_ENV)\n```\n\n\n## 源码解析\n\n\nvue cli3 中 [环境变量和模式](https://cli.vuejs.org/zh/guide/mode-and-env.html) 写到它可以通过获取`.env`、`.env.local`、`.env.[mode]`、`.env.[mode].local`文件中的内容定义环境变量。\n\n\n比如：\n```\nVUE_APP_TITLE=TITLE\n```\n文档中写道：只有以 `VUE_APP_` 开头的变量会被 `webpack.DefinePlugin` 静态嵌入到客户端侧的包中。\n\n那我们来看源码:\n\n### [base.js](https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/config/base.js#L192)\n>引入方法`resolveClientEnv.js`,通过 [`webpack-chain`](https://github.com/neutrinojs/webpack-chain), 链式配置了`DefinePlugin`使变量静态嵌入到客户端侧的包中。\n```\n const resolveClientEnv = require('../util/resolveClientEnv')\n    webpackConfig\n      .plugin('define')\n        .use(require('webpack').DefinePlugin, [\n          resolveClientEnv(options)\n        ])\n```\n\n\n### [resolveClientEnv.js](https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/util/resolveClientEnv.js)\n> 就是这个方法定义了环境变量必须为`VUE_APP_`开始的规则，那么问题来了`process.env`里的值是哪里来的，为什么我们定义在配置文件中的值会被写入到`process.env`里接着往下看。\n```\n\n// 正则匹配以 VUE_APP_ 开头的 key\nconst prefixRE = /^VUE_APP_/\n\nmodule.exports = function resolveClientEnv (options, raw) {\n  const env = {}\n  \n  // 循环 process.env 的 key\n  Object.keys(process.env).forEach(key => {\n  \n    // 匹配key符合正则或key等于NODE_ENV\n    if (prefixRE.test(key) || key === 'NODE_ENV') {\n      env[key] = process.env[key]\n    }\n  })\n  env.BASE_URL = options.publicPath\n\n  if (raw) {\n    return env\n  }\n\n  for (const key in env) {\n    env[key] = JSON.stringify(env[key])\n  }\n  \n  // 返回环境变量配置\n  return {\n    'process.env': env\n  }\n}\n```\n### [Service.js](https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/Service.js#L89)\n> 从配置文件中获取环境变量的相关代码其中关键的是[`dotenv`](https://github.com/motdotla/dotenv/blob/master/lib/main.js)、[`dotenv-expand`](https://github.com/motdotla/dotenv-expand/blob/master/lib/main.js) \n>\n>` dotenv`:将配置文件中的参数读取并写入环境变量\n>\n>`dotenv-expand` : 将`dotenv`读取的环境变量进行再次处理筛选其中以`${key}`定义的变量，并查询`node`的环境变量中是否包含对应的`key`假如存在就赋值。\n>\n>具体的代码我就不放了想看可以点上面的链接自己看。\n```\nconst dotenv = require('dotenv')\nconst dotenvExpand = require('dotenv-expand')\n...\nmodule.exports = class Service {\n\n  ...\n\n  // 加载环境变量\n  loadEnv (mode) {\n    const logger = debug('vue:env')\n    const basePath = path.resolve(this.context, `.env${mode ? `.${mode}` : ``}`)\n    const localPath = `${basePath}.local`\n\n    const load = envPath => {\n      try {\n        const env = dotenv.config({ path: envPath, debug: process.env.DEBUG })\n        dotenvExpand(env)\n        logger(envPath, env)\n      } catch (err) {\n        // only ignore error if file is not found\n        if (err.toString().indexOf('ENOENT') < 0) {\n          error(err)\n        }\n      }\n    }\n\n    load(localPath)\n    load(basePath)\n\n    // by default, NODE_ENV and BABEL_ENV are set to \"development\" unless mode\n    // is production or test. However the value in .env files will take higher\n    // priority.\n    if (mode) {\n      // always set NODE_ENV during tests\n      // as that is necessary for tests to not be affected by each other\n      const shouldForceDefaultEnv = (\n        process.env.VUE_CLI_TEST &&\n        !process.env.VUE_CLI_TEST_TESTING_ENV\n      )\n      const defaultNodeEnv = (mode === 'production' || mode === 'test')\n        ? mode\n        : 'development'\n      if (shouldForceDefaultEnv || process.env.NODE_ENV == null) {\n        process.env.NODE_ENV = defaultNodeEnv\n      }\n      if (shouldForceDefaultEnv || process.env.BABEL_ENV == null) {\n        process.env.BABEL_ENV = defaultNodeEnv\n      }\n    }\n  }\n  \n  ...\n \n }\n```\n\n### 综上所述：我们就可以这样定义我们的环境变量\n\npackage.json\n```\n{\n    ...\n    \"scripts\":{\n        \"serve:dev\": \"cross-env API_ENV=dev vue-cli-service serve\"\n        ...\n    },\n    \"dependencies\": {\n      ...\n      \"cross-env\": \"^7.0.2\",\n      ...\n    },\n    ...\n}\n```\n.env\n```\nVUE_APP_API_ENV=${API_ENV}\n```\n项目中取用\n```\nconsole.log(process.env.VUE_APP_API_ENV)\n```\n### 那么有人就会问了，这个在实际项目中的意义是什么？\n\n假如公司有个项目共有三个环境：测试、预发、线上，而接口地址是需要通过环境变量判断的。并且我们希望在开发的过程中也可以调试线上或其他的服务接口且发布到线上的项目希望`mode`为`production`，本地调试的项目我们希望`mode`为`development`那我得新建多少配置文件？\n",
      "data": {
        "title": "VUE CLI3 结合 cross-env 配置环境变量（含环境变量源码解析）",
        "date": "2021-02-17 00:08:53",
        "tags": [
          "vue"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "aocYfRCOM"
    },
    {
      "content": "\n### 保证每个Text组件, RN > 0.60, 小于这个版本可能不存在这个问题\n\n1. 基本样式都有 `fontFamily: ''` , 你没看错, 至少得有个字体为空, 也不影响用户自定义字体\n\n2. 属性至少有 `textBreakStrategy='simple'`\n\n3. 属性至少有 `numberOfLines={0}`, 意思就是你不设置也要搞个初始值0\n",
      "data": {
        "title": "React-Native 安卓 文字截断 文字看不全 解决方案",
        "date": "2021-02-17 00:08:16",
        "tags": [
          "react-native"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "fkwyV-3OV"
    },
    {
      "content": "。。。",
      "data": {
        "title": "关于",
        "date": "2021-02-16 23:55:01",
        "tags": [],
        "published": true,
        "hideInList": true,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    }
  ],
  "tags": [
    {
      "index": -1,
      "name": "css",
      "slug": "kCJ9NzuJN",
      "used": true
    },
    {
      "index": -1,
      "name": "ios",
      "slug": "EQHzK48mS",
      "used": true
    },
    {
      "index": -1,
      "name": "vue",
      "slug": "vue",
      "used": true
    },
    {
      "index": -1,
      "name": "服务部署",
      "slug": "bTHMbCyj5",
      "used": true
    },
    {
      "index": -1,
      "name": "leetcode算法",
      "slug": "QdA6dffbV",
      "used": true
    },
    {
      "index": -1,
      "name": "react-native",
      "slug": "TFfhTEfXd",
      "used": true
    },
    {
      "index": -1,
      "name": "java",
      "slug": "3CvXE5HSY",
      "used": false
    },
    {
      "index": -1,
      "name": "spring",
      "slug": "G5UrJOVX1",
      "used": false
    },
    {
      "index": -1,
      "name": "react",
      "slug": "mrs5cXspG",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}